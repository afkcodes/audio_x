{"version":3,"sources":["../src/constants/equalizer.ts","../src/constants/common.ts","../src/helpers/notifier.ts","../src/helpers/common.ts","../src/adapters/equalizer.ts","../src/events/hlsEvents.ts","../src/events/audioEvents.ts","../src/events/listeners.ts","../src/adapters/hls.ts","../src/events/errorEvents.ts","../src/events/baseEvents.ts","../src/mediasession/mediasessionHandler.ts","../src/states/audioState.ts","../src/audio.ts"],"names":["bands","frequency","type","gain","q","presets","name","id","default","gains","AUDIO_X_CONSTANTS","Object","freeze","REACT","VANILLA","DEVELOPMENT","PLAYBACK_STATE","BUFFERING","PLAYING","PAUSED","READY","IDLE","ENDED","STALLED","ERROR","TRACK_CHANGE","DURATION_CHANGE","QUEUE_ENDED","ERROR_MSG_MAP","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","DEFAULT","URLS","HLS","CAST","_a","ChangeNotifier","validateEventName","eventName","Error","notify","data","caller","listenerCbs","listeners","notifierState","__spreadValues","forEach","cb","listen","callback","state","add","Set","eventListeners","delete","size","multiListen","callbacks","Array","isArray","length","unsubscribeFunctions","map","unsubscribe","getLatestState","__publicField","notifier_default","isValidArray","__name","arr","isValidFunction","fn","Function","isValidWindow","loadedScripts","getReadableErrorMessage","audioInstance","message","err","error","code","MediaError","metaDataCreator","mediaTrack","title","album","artist","artwork","artworkUrl","src","artworkMap","el","sizes","previousTrackPlayTime","calculateActualPlayedLength","event","lengthSet","i","played","startX","start","width","end","currentTrackPlayTime","reduce","acc","val","includes","loadScript","url","onLoad","Promise","resolve","reject","window","Window","document","script","createElement","async","onload","head","appendChild","handleQueuePlayback","audio","AudioX","hasEnded","audioStateListener","playbackState","queue","getQueue","playNext","getBufferedDuration","buffered","bufferedDuration","shuffle","array","shuffledArray","j","Math","floor","random","diffChecker","d1","d2","every","item","index","keys1","keys","keys2","key","Equalizer","constructor","audioCtx","audioCtxStatus","eqFilterBands","bassBoostFilter","compressor","_instance","initializeAudioContext","audioContextOptions","latencyHint","AudioContext","webkitAudioContext","init","addResumeListener","resume","setTimeout","body","removeEventListener","addEventListener","getAudioInstance","audioSource","createMediaElementSource","equalizerBands","band","filter","createBiquadFilter","value","Q","createDynamicsCompressor","threshold","knee","ratio","attack","release","connect","destination","setPreset","preset","find","currentTime","targetGain","setTargetAtTime","getPresets","status","setCustomEQ","setBassBoost","enable","setCompressorSettings","options","undefined","reset","HLS_EVENTS_CALLBACK_MAP","e","detail","details","isFatal","fatal","FRAG_CHANGED","AUDIO_EVENTS","ABORT","TIME_UPDATE","CAN_PLAY","CAN_PLAY_THROUGH","EMPTIED","WAITING","SEEKING","SEEKED","LOADED_META_DATA","LOADED_DATA","PLAY","PAUSE","RATE_CHANGE","VOLUME_CHANGE","SUSPEND","PROGRESS","LOAD_START","HLS_EVENTS","MEDIA_ATTACHING","MEDIA_ATTACHED","MEDIA_DETACHING","MEDIA_DETACHED","BUFFER_RESET","BUFFER_CODECS","BUFFER_CREATED","BUFFER_APPENDING","BUFFER_APPENDED","BUFFER_EOS","BUFFER_FLUSHING","BUFFER_FLUSHED","MANIFEST_LOADING","MANIFEST_LOADED","MANIFEST_PARSED","LEVEL_SWITCHING","LEVEL_SWITCHED","LEVEL_LOADING","LEVEL_LOADED","LEVEL_UPDATED","LEVEL_PTS_UPDATED","LEVELS_UPDATED","AUDIO_TRACKS_UPDATED","AUDIO_TRACK_SWITCHING","AUDIO_TRACK_SWITCHED","AUDIO_TRACK_LOADING","AUDIO_TRACK_LOADED","SUBTITLE_TRACKS_UPDATED","SUBTITLE_TRACKS_CLEARED","SUBTITLE_TRACK_SWITCH","SUBTITLE_TRACK_LOADING","SUBTITLE_TRACK_LOADED","SUBTITLE_FRAG_PROCESSED","CUES_PARSED","NON_NATIVE_TEXT_TRACKS_FOUND","INIT_PTS_FOUND","FRAG_LOADING","FRAG_LOAD_EMERGENCY_ABORTED","FRAG_LOADED","FRAG_DECRYPTED","FRAG_PARSING_INIT_SEGMENT","FRAG_PARSING_USERDATA","FRAG_PARSING_METADATA","FRAG_PARSED","FRAG_BUFFERED","FPS_DROP","FPS_DROP_LEVEL_CAPPING","DESTROYING","KEY_LOADING","KEY_LOADED","LIVE_BACK_BUFFER_REACHED","BACK_BUFFER_REACHED","attachEventListeners","eventListenersCallbackMap","playLogEnabled","evt","listenerCallback","attachHlsEventsListeners","hlsEventlistenerCallbackMap","hlsInstance","HlsAdapter","getHlsInstance","on","HlsClass","load","__async","then","Hls","catch","msg","config","enablePlayLog","isSupported","addHlsMedia","loadSource","source","attachMedia","Events","hls_default","ERROR_EVENTS","notifier","BASE_EVENT_CALLBACK_MAP","duration","readable","audioState","isPaused","paused","progress","errorCode","updateMetaData","navigator","mediaSession","metadata","MediaMetadata","attachMediaSessionHandlers","setActionHandler","play","pause","playPrevious","READY_STATE","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","AUDIO_STATE","volume","playbackRate","currentTrack","latestState","_audio","isPlayLogEnabled","_queue","_currentQueueIndex","_fetchFn","eqStatus","isEqEnabled","eqInstance","showNotificationsActions","process","env","NODE_ENV","Audio","initProps","preloadStrategy","autoPlay","useDefaultEventListeners","customEventListeners","showNotificationActions","enableHls","enableEQ","crossOrigin","hlsConfig","setAttribute","preload","autoplay","addMedia","mediaFetchFn","findIndex","track","mediaType","canPlayType","hls","detachMedia","attachEq","eq","isSourceAvailable","addMediaAndPlay","fetchFn","stop","srcObject","setVolume","actualVolume","setPlaybackRate","mute","muted","seek","time","seekBy","currentProgress","destroy","removeAttribute","subscribe","enabled","boost","addQueue","playbackType","clearQueue","playerQueue","slice","reverse","nextTrack","previousTrack","addToQueue","mediaTracks","push","removeFromQueue","getAttribute"],"mappings":"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","file":"index.js","sourcesContent":["import { Band } from 'types/equalizer.types';\n\nconst bands: Band[] = [\n  { frequency: 31, type: 'lowshelf', gain: 0, q: 1.2 },\n  { frequency: 63, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 125, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 250, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 500, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 1000, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 2000, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 4000, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 8000, type: 'peaking', gain: 0, q: 1.2 },\n  { frequency: 16000, type: 'highshelf', gain: 0, q: 1.2 }\n];\n\nconst presets = [\n  {\n    name: 'Default',\n    id: 'default',\n    default: true,\n    gains: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  },\n  {\n    name: 'Club',\n    id: 'club',\n    default: true,\n    gains: [0.0, 0.0, 4.8, 3.36, 3.36, 3.36, 1.92, 0.0, 0.0, 0.0]\n  },\n  {\n    name: 'Live',\n    id: 'live',\n    default: true,\n    gains: [-2.88, 0.0, 2.4, 3.36, 3.36, 3.36, 2.4, 1.44, 1.44, 1.44]\n  },\n  {\n    name: 'Party',\n    id: 'Party',\n    default: true,\n    gains: [4.32, 4.32, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.32, 4.32]\n  },\n  {\n    name: 'Pop',\n    id: 'pop',\n    default: true,\n    gains: [0.96, 2.88, 4.32, 4.8, 3.36, 0.0, -1.44, -1.44, 0.96, 0.96]\n  },\n  {\n    name: 'Soft',\n    id: 'soft',\n    default: true,\n    gains: [2.88, 0.96, 0.0, -1.44, 0.0, 2.4, 4.8, 5.76, 6.72, 7.2]\n  },\n  {\n    name: 'Ska',\n    id: 'ska',\n    default: true,\n    gains: [-1.44, -2.88, -2.4, 0.0, 2.4, 3.36, 5.28, 5.76, 6.72, 5.76]\n  },\n  {\n    name: 'Reggae',\n    id: 'reggae',\n    default: true,\n    gains: [0.0, 0.0, 0.0, -3.36, 0.0, 3.84, 3.84, 0.0, 0.0, 0.0]\n  },\n\n  {\n    name: 'Rock',\n    id: 'rock',\n    default: true,\n    gains: [4.8, 2.88, -3.36, -4.8, -1.92, 2.4, 5.28, 6.72, 6.72, 6.72]\n  },\n  {\n    name: 'Dance',\n    id: 'dance',\n    default: true,\n    gains: [5.76, 4.32, 1.44, 0.0, 0.0, -3.36, -4.32, -4.32, 0.0, 0.0]\n  },\n  {\n    name: 'Techno',\n    id: 'techno',\n    default: true,\n    gains: [4.8, 3.36, 0.0, -3.36, -2.88, 0.0, 4.8, 5.76, 5.76, 5.28]\n  },\n  {\n    name: 'Headphones',\n    id: 'headphones',\n    default: true,\n    gains: [2.88, 6.72, 3.36, -1.92, -1.44, 0.96, 2.88, 5.76, 7.68, 8.64]\n  },\n  {\n    name: 'Soft rock',\n    id: 'soft_rock',\n    default: true,\n    gains: [2.4, 2.4, 1.44, 0.0, -2.4, -3.36, -1.92, 0.0, 1.44, 5.28]\n  },\n  {\n    name: 'Classical',\n    id: 'classical',\n    default: true,\n    gains: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.32, -4.32, -4.32, -5.76]\n  },\n  {\n    name: 'Large Hall',\n    id: 'large_hall',\n    default: true,\n    gains: [6.24, 6.24, 3.36, 3.36, 0.0, -2.88, -2.88, -2.88, 0.0, 0.0]\n  },\n  {\n    name: 'Full Bass',\n    id: 'full_base',\n    default: true,\n    gains: [4.8, 5.76, 5.76, 3.36, 0.96, -2.4, -4.8, -6.24, -6.72, -6.72]\n  },\n  {\n    name: 'Full Treble',\n    id: 'full_treble',\n    default: true,\n    gains: [-5.76, -5.76, -5.76, -2.4, 1.44, 6.72, 9.6, 9.6, 9.6, 10.08]\n  },\n  {\n    name: 'Laptop Speakers',\n    id: 'laptop_speakers',\n    default: true,\n    gains: [2.88, 6.72, 3.36, -1.92, -1.44, 0.96, 2.88, 5.76, 7.68, 8.64]\n  },\n  {\n    name: 'Full Bass & Treble',\n    id: 'bass_treble',\n    default: true,\n    gains: [4.32, 3.36, 0.0, -4.32, -2.88, 0.96, 4.8, 6.72, 7.2, 7.2]\n  }\n];\n\nexport { bands, presets };\n","import { InitMode } from 'types';\nimport { ErrorMessageMap } from 'types/errorEvents.types';\n\nconst AUDIO_X_CONSTANTS = Object.freeze({\n  REACT: 'REACT' as InitMode,\n  VANILLA: 'VANILLA' as InitMode,\n  DEVELOPMENT: 'development'\n});\n\nconst PLAYBACK_STATE = Object.freeze({\n  BUFFERING: 'buffering',\n  PLAYING: 'playing',\n  PAUSED: 'paused',\n  READY: 'ready',\n  IDLE: 'idle',\n  ENDED: 'ended',\n  STALLED: 'stalled',\n  ERROR: 'error',\n  TRACK_CHANGE: 'trackchanged',\n  DURATION_CHANGE: 'durationchanged',\n  QUEUE_ENDED: 'queueended'\n});\n\nconst ERROR_MSG_MAP: ErrorMessageMap = Object.freeze({\n  MEDIA_ERR_ABORTED: 'The user canceled the audio.',\n  MEDIA_ERR_DECODE: 'An error occurred while decoding the audio.',\n  MEDIA_ERR_NETWORK: 'A network error occurred while fetching the audio.',\n  MEDIA_ERR_SRC_NOT_SUPPORTED:\n    'The audio is missing or is in a format not supported by your browser.',\n  DEFAULT: 'An unknown error occurred.'\n});\n\nconst URLS = {\n  HLS: 'https://cdnjs.cloudflare.com/ajax/libs/hls.js/1.5.11/hls.min.js',\n  CAST: 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1'\n};\n\nexport { AUDIO_X_CONSTANTS, ERROR_MSG_MAP, PLAYBACK_STATE, URLS };\n","type ListenerCallback<T> = (data: T) => void;\n\nclass ChangeNotifier {\n  private static listeners: Record<string, Set<ListenerCallback<any>>> = {};\n  private static notifierState: Record<string, any> = {};\n\n  private static validateEventName(eventName: string): void {\n    if (!eventName || typeof eventName !== 'string') {\n      throw new Error('Invalid event name');\n    }\n  }\n\n  static notify<T>(\n    eventName: string,\n    data: T,\n    caller: string = 'audiox_notifier_default'\n  ): void {\n    this.validateEventName(eventName);\n\n    const listenerCbs = ChangeNotifier.listeners[eventName];\n\n    if (!listenerCbs) return;\n\n    if (data !== null) {\n      console.log(`NOTIFYING TO EVENT : ${eventName} - CALLER : ${caller}`);\n\n      ChangeNotifier.notifierState[eventName] = {\n        ...(ChangeNotifier.notifierState[eventName] || {}),\n        ...data\n      };\n\n      listenerCbs.forEach((cb: ListenerCallback<any>) => {\n        cb(ChangeNotifier.notifierState[eventName]);\n      });\n    }\n  }\n\n  static listen<T>(\n    eventName: string,\n    callback: ListenerCallback<T>,\n    state = {}\n  ): () => void {\n    this.validateEventName(eventName);\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    if (!ChangeNotifier.listeners[eventName]) {\n      ChangeNotifier.notifierState[eventName] = state;\n      ChangeNotifier.listeners[eventName] = new Set([callback]);\n    } else {\n      ChangeNotifier.listeners[eventName].add(callback);\n    }\n\n    return (): void => {\n      const eventListeners = ChangeNotifier.listeners[eventName];\n\n      if (!eventListeners) {\n        console.log(`EVENT NOT FOUND : ${eventName}`);\n        return;\n      }\n\n      console.log(`REMOVING EVENT LISTENER FOR EVENT : ${eventName}`);\n\n      eventListeners.delete(callback);\n\n      if (eventListeners.size === 0) {\n        delete ChangeNotifier.listeners[eventName];\n      }\n    };\n  }\n\n  static multiListen<T>(\n    eventName: string,\n    callbacks: ListenerCallback<T>[],\n    state = {}\n  ): () => void {\n    this.validateEventName(eventName);\n\n    if (!Array.isArray(callbacks) || callbacks.length === 0) {\n      throw new Error('Callbacks must be a non-empty array of functions');\n    }\n\n    const unsubscribeFunctions = callbacks.map((callback) =>\n      ChangeNotifier.listen(eventName, callback, state)\n    );\n\n    return (): void => {\n      unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n    };\n  }\n\n  // Retrieve the latest state data for a specific event\n  static getLatestState<T>(eventName: string): T | undefined {\n    this.validateEventName(eventName);\n\n    return ChangeNotifier.notifierState[eventName];\n  }\n}\n\nexport default ChangeNotifier;\n","import { AudioX } from 'audio';\nimport { ERROR_MSG_MAP } from 'constants/common';\nimport { AudioEvents, AudioState, MediaTrack } from 'types';\nimport ChangeNotifier from './notifier';\n\nconst isValidArray = (arr: any[]) => arr && Array.isArray(arr) && arr.length;\nconst isValidFunction = (fn: any) =>\n  fn instanceof Function && typeof fn === 'function';\n\nconst isValidObject = (obj: any) =>\n  typeof obj === 'object' &&\n  obj !== null &&\n  obj instanceof Object &&\n  Object.keys(obj).length;\n\nconst isValidWindow = typeof window !== undefined && window instanceof Window;\nconst loadedScripts: any = {};\n\nconst getReadableErrorMessage = (audioInstance: HTMLAudioElement) => {\n  let message = '';\n  const err = audioInstance.error;\n\n  switch (err?.code) {\n    case MediaError.MEDIA_ERR_ABORTED:\n      message += ERROR_MSG_MAP['MEDIA_ERR_ABORTED'];\n      break;\n    case MediaError.MEDIA_ERR_NETWORK:\n      message += ERROR_MSG_MAP['MEDIA_ERR_NETWORK'];\n      break;\n    case MediaError.MEDIA_ERR_DECODE:\n      message += ERROR_MSG_MAP['MEDIA_ERR_DECODE'];\n      break;\n    case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n      message += ERROR_MSG_MAP['MEDIA_ERR_SRC_NOT_SUPPORTED'];\n      break;\n    default:\n      message += ERROR_MSG_MAP['DEFAULT'];\n      break;\n  }\n\n  return message;\n};\n\nconst metaDataCreator = (mediaTrack: MediaTrack) => {\n  const { title, album, artist, artwork } = mediaTrack;\n  const artworkUrl = artwork ? artwork[0]?.src : '';\n  const sizes = [\n    '96x96',\n    '128x128',\n    '192x192',\n    '256x256',\n    '384x384',\n    '512x512'\n  ];\n  const artworkMap = sizes.map((el) => {\n    return { src: artworkUrl, sizes: el, type: 'image/png' };\n  });\n  const metaData = {\n    title,\n    album,\n    artist,\n    artwork: artworkMap\n  };\n  return metaData;\n};\n\nlet previousTrackPlayTime = 0;\nexport const calculateActualPlayedLength = (\n  audioInstance: HTMLAudioElement,\n  event?: keyof AudioEvents\n) => {\n  const lengthSet = new Set();\n  for (let i = 0; i < audioInstance.played.length; i++) {\n    const startX = audioInstance.played.start(i);\n    const endX = audioInstance.played.end(i);\n    const width = endX - startX;\n    lengthSet.add(width);\n  }\n  const lengthArr = [...lengthSet] as number[];\n  const currentTrackPlayTime = lengthArr.reduce((acc, val) => acc + val, 0);\n\n  previousTrackPlayTime = ['ENDED', 'TRACK_CHANGE', 'PAUSE'].includes(\n    event as keyof AudioEvents\n  )\n    ? currentTrackPlayTime\n    : previousTrackPlayTime;\n  ChangeNotifier.notify('AUDIO_STATE', {\n    currentTrackPlayTime,\n    previousTrackPlayTime\n  });\n};\n\nconst loadScript = (\n  url: string,\n  onLoad: () => void,\n  name: string\n): Promise<void> => {\n  return new Promise<void>((resolve, reject) => {\n    if (window instanceof Window && window.document) {\n      if (!loadedScripts[name]) {\n        loadedScripts[name] = true;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        script.async = true;\n        script.onload = () => {\n          onLoad();\n          resolve();\n        };\n        document.head.appendChild(script);\n      } else {\n        onLoad();\n        resolve();\n      }\n    } else {\n      reject(`Window not ready unable to initialize ${name}`);\n    }\n  });\n};\n\nconst handleQueuePlayback = () => {\n  const audio = new AudioX();\n  let hasEnded = false;\n\n  const audioStateListener = (state: AudioState) => {\n    if (state.playbackState === 'ended' && !hasEnded) {\n      const queue = audio.getQueue();\n      hasEnded = true;\n      if (queue && isValidArray(queue) && hasEnded) {\n        audio.playNext();\n      }\n    }\n    if (state.playbackState !== 'ended') {\n      hasEnded = false;\n    }\n  };\n\n  ChangeNotifier.listen('AUDIO_STATE', audioStateListener);\n};\n\nconst getBufferedDuration = (audioInstance: HTMLAudioElement) => {\n  const { buffered } = audioInstance;\n  let bufferedDuration = 0;\n\n  for (let i = 0; i < buffered.length; i++) {\n    bufferedDuration += buffered.end(i) - buffered.start(i);\n  }\n\n  return bufferedDuration;\n};\n\nconst shuffle = <T>(array: T[]): T[] => {\n  const shuffledArray = [...array];\n\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n\n  return shuffledArray;\n};\n\nconst diffChecker = (d1: any, d2: any): boolean => {\n  if (d1 === null && d2 === null) {\n    return true;\n  }\n\n  if (d1 === null || d2 === null) {\n    return false;\n  }\n\n  if (typeof d1 !== typeof d2) {\n    return false;\n  }\n\n  if (typeof d1 !== 'object') {\n    return d1 === d2;\n  }\n\n  if (Array.isArray(d1) && Array.isArray(d2)) {\n    if (d1.length !== d2.length) {\n      return false;\n    }\n\n    return d1.every((item, index) => diffChecker(item, d2[index]));\n  }\n\n  const keys1 = Object.keys(d1);\n  const keys2 = Object.keys(d2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  return keys1.every((key) => {\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    return diffChecker(d1[key], d2[key]);\n  });\n};\n\nexport {\n  diffChecker,\n  getBufferedDuration,\n  getReadableErrorMessage,\n  handleQueuePlayback,\n  isValidArray,\n  isValidFunction,\n  isValidObject,\n  isValidWindow,\n  loadScript,\n  metaDataCreator,\n  shuffle\n};\n","import { AudioX } from 'audio';\nimport { bands, presets } from 'constants/equalizer';\nimport { isValidArray } from 'helpers/common';\n\nimport { EqualizerStatus, Preset } from 'types/equalizer.types';\n\nclass Equalizer {\n  private static _instance: Equalizer;\n  private audioCtx: AudioContext;\n  private audioCtxStatus: EqualizerStatus;\n  private eqFilterBands: BiquadFilterNode[];\n  private bassBoostFilter: BiquadFilterNode;\n  private compressor: DynamicsCompressorNode;\n\n  /**\n   * Creates an instance of Equalizer or returns the existing instance.\n   */\n  constructor() {\n    if (Equalizer._instance) {\n      console.warn(\n        'Instantiation failed: cannot create multiple instances of Equalizer. Returning existing instance.'\n      );\n      return Equalizer._instance;\n    }\n\n    this.initializeAudioContext();\n\n    Equalizer._instance = this;\n  }\n\n  /**\n   * Initializes the AudioContext, ensuring compatibility with older browsers.\n   * @private\n   */\n  private initializeAudioContext() {\n    const audioContextOptions = { latencyHint: 'playback' };\n    if (typeof AudioContext !== 'undefined') {\n      this.audioCtx = new AudioContext(\n        audioContextOptions as AudioContextOptions\n      );\n    } else if (typeof (window as any).webkitAudioContext !== 'undefined') {\n      this.audioCtx = new (window as any).webkitAudioContext(\n        audioContextOptions\n      );\n    } else {\n      console.error('Web Audio API is not supported in this browser.');\n    }\n\n    this.audioCtxStatus = 'ACTIVE';\n    this.init();\n\n    if (this.audioCtx.state === 'suspended') {\n      this.addResumeListener();\n    }\n  }\n\n  /**\n   * Adds a listener to resume the AudioContext on user interaction.\n   * @private\n   */\n  private addResumeListener() {\n    const resume = () => {\n      this.audioCtx.resume();\n      setTimeout(() => {\n        if (this.audioCtx.state === 'running') {\n          document.body.removeEventListener('click', resume, false);\n        }\n      }, 0);\n    };\n\n    document.body.addEventListener('click', resume, false);\n  }\n\n  /**\n   * Initializes the equalizer by setting up the audio source and filter bands.\n   */\n  init() {\n    try {\n      const audioInstance = AudioX.getAudioInstance();\n      const audioSource = this.audioCtx.createMediaElementSource(audioInstance);\n\n      const equalizerBands = bands.map((band) => {\n        const filter = this.audioCtx.createBiquadFilter();\n        filter.type = band.type;\n        filter.frequency.value = band.frequency;\n        filter.gain.value = band.gain;\n        filter.Q.value = band.q || 1; // Use a default Q of 1 if not specified\n        return filter;\n      });\n\n      // Create a compressor for overall dynamic control\n      this.compressor = this.audioCtx.createDynamicsCompressor();\n      this.compressor.threshold.value = -24;\n      this.compressor.knee.value = 30;\n      this.compressor.ratio.value = 12;\n      this.compressor.attack.value = 0.003;\n      this.compressor.release.value = 0.25;\n\n      // Create the bass boost filter\n      this.bassBoostFilter = this.audioCtx.createBiquadFilter();\n      this.bassBoostFilter.type = 'lowshelf';\n      this.bassBoostFilter.frequency.value = 100;\n      this.bassBoostFilter.gain.value = 0;\n\n      // Connect the nodes\n      audioSource.connect(equalizerBands[0]);\n      for (let i = 0; i < equalizerBands.length - 1; i++) {\n        equalizerBands[i].connect(equalizerBands[i + 1]);\n      }\n      equalizerBands[equalizerBands.length - 1].connect(this.bassBoostFilter);\n      this.bassBoostFilter.connect(this.compressor);\n      this.compressor.connect(this.audioCtx.destination);\n\n      this.audioCtxStatus = 'ACTIVE';\n      this.eqFilterBands = equalizerBands;\n    } catch (error) {\n      console.error('Equalizer initialization failed:', error);\n      this.audioCtxStatus = 'FAILED';\n    }\n  }\n\n  /**\n   * Sets the equalizer to a predefined preset.\n   * @param {keyof Preset} id - The ID of the preset to apply.\n   */\n  setPreset(id: keyof Preset) {\n    const preset = presets.find((el) => el.id === id);\n    if (!preset) {\n      console.error('Preset not found:', id);\n      return;\n    }\n\n    if (\n      !this.eqFilterBands ||\n      this.eqFilterBands.length !== preset.gains.length\n    ) {\n      console.error('Invalid data provided.');\n      return;\n    }\n\n    const currentTime = this.audioCtx.currentTime;\n    this.eqFilterBands.forEach((band, index) => {\n      const targetGain = preset.gains[index];\n      band.gain.setTargetAtTime(targetGain, currentTime, 0.05);\n    });\n  }\n\n  /**\n   * Retrieves the list of available presets.\n   * @returns {Preset[]} The list of available presets.\n   */\n  static getPresets() {\n    return presets;\n  }\n\n  /**\n   * Gets the current status of the AudioContext.\n   * @returns {EqualizerStatus} The current status of the AudioContext.\n   */\n  status() {\n    if (this.audioCtx.state === 'suspended') {\n      this.audioCtx.resume();\n    }\n    return this.audioCtxStatus;\n  }\n\n  /**\n   * Sets a custom equalizer configuration.\n   * @param {number[]} gains - The gain values for each band.\n   */\n  setCustomEQ(gains: number[]) {\n    if (isValidArray(gains) && gains.length === this.eqFilterBands.length) {\n      const currentTime = this.audioCtx.currentTime;\n      this.eqFilterBands.forEach((band: BiquadFilterNode, index: number) => {\n        band.gain.setTargetAtTime(gains[index], currentTime, 0.05);\n      });\n    } else {\n      console.error('Invalid array of gains provided.');\n    }\n  }\n\n  /**\n   * Enables or disables bass boost.\n   * @param {boolean} enable - Whether to enable or disable bass boost.\n   * @param {number} gain - The gain value for bass boost.\n   */\n  setBassBoost(enable: boolean, gain: number = 6) {\n    const currentTime = this.audioCtx.currentTime;\n    if (enable) {\n      this.bassBoostFilter.gain.setTargetAtTime(gain, currentTime, 0.05);\n    } else {\n      this.bassBoostFilter.gain.setTargetAtTime(0, currentTime, 0.05);\n    }\n  }\n\n  /**\n   * Adjusts the compressor settings.\n   * @param {Partial<DynamicsCompressorOptions>} options - The compressor options to adjust.\n   */\n  setCompressorSettings(options: Partial<DynamicsCompressorOptions>) {\n    if (this.compressor) {\n      if (options.threshold !== undefined)\n        this.compressor.threshold.setTargetAtTime(\n          options.threshold,\n          this.audioCtx.currentTime,\n          0.01\n        );\n      if (options.knee !== undefined)\n        this.compressor.knee.setTargetAtTime(\n          options.knee,\n          this.audioCtx.currentTime,\n          0.01\n        );\n      if (options.ratio !== undefined)\n        this.compressor.ratio.setTargetAtTime(\n          options.ratio,\n          this.audioCtx.currentTime,\n          0.01\n        );\n      if (options.attack !== undefined)\n        this.compressor.attack.setTargetAtTime(\n          options.attack,\n          this.audioCtx.currentTime,\n          0.01\n        );\n      if (options.release !== undefined)\n        this.compressor.release.setTargetAtTime(\n          options.release,\n          this.audioCtx.currentTime,\n          0.01\n        );\n    }\n  }\n\n  /**\n   * Resets the equalizer to flat response.\n   */\n  reset() {\n    const currentTime = this.audioCtx.currentTime;\n    this.eqFilterBands.forEach((band: BiquadFilterNode) => {\n      band.gain.setTargetAtTime(0, currentTime, 0.05);\n    });\n    this.bassBoostFilter.gain.setTargetAtTime(0, currentTime, 0.05);\n  }\n}\n\nexport { Equalizer };\n","import { PLAYBACK_STATE } from 'constants/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { HlsEventsCallbackMap } from 'types/audioEvents.types';\n\nexport const HLS_EVENTS_CALLBACK_MAP: HlsEventsCallbackMap = {\n  ERROR: (e: Event, data: any) => {\n    const type = data.type;\n    const detail = data.details;\n    const isFatal = data.fatal;\n    console.log('STATUS', e.type);\n\n    ChangeNotifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.ERROR,\n        error: {\n          type,\n          isFatal,\n          detail\n        }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  FRAG_CHANGED: () => {\n    console.log('FRAG_CHANGED');\n  }\n};\n","import { AudioEvents } from 'types';\n\nexport const AUDIO_EVENTS: AudioEvents = Object.freeze({\n  ABORT: 'abort',\n  TIME_UPDATE: 'timeupdate',\n  CAN_PLAY: 'canplay',\n  CAN_PLAY_THROUGH: 'canplaythrough',\n  DURATION_CHANGE: 'durationchange',\n  ENDED: 'ended',\n  EMPTIED: 'emptied',\n  PLAYING: 'playing',\n  WAITING: 'waiting',\n  SEEKING: 'seeking',\n  SEEKED: 'seeked',\n  LOADED_META_DATA: 'loadedmetadata',\n  LOADED_DATA: 'loadeddata',\n  PLAY: 'play',\n  PAUSE: 'pause',\n  RATE_CHANGE: 'ratechange',\n  VOLUME_CHANGE: 'volumechange',\n  SUSPEND: 'suspend',\n  STALLED: 'stalled',\n  PROGRESS: 'progress',\n  LOAD_START: 'loadstart',\n  ERROR: 'error',\n  TRACK_CHANGE: 'trackchange', // this is a custom event added to support track change\n  QUEUE_ENDED: 'queueended' // this is a custom event added to support end of queue\n});\n\nexport const HLS_EVENTS = {\n  MEDIA_ATTACHING: 'hlsMediaAttaching',\n  MEDIA_ATTACHED: 'hlsMediaAttached',\n  MEDIA_DETACHING: 'hlsMediaDetaching',\n  MEDIA_DETACHED: 'hlsMediaDetached',\n  BUFFER_RESET: 'hlsBufferReset',\n  BUFFER_CODECS: 'hlsBufferCodecs',\n  BUFFER_CREATED: 'hlsBufferCreated',\n  BUFFER_APPENDING: 'hlsBufferAppending',\n  BUFFER_APPENDED: 'hlsBufferAppended',\n  BUFFER_EOS: 'hlsBufferEos',\n  BUFFER_FLUSHING: 'hlsBufferFlushing',\n  BUFFER_FLUSHED: 'hlsBufferFlushed',\n  MANIFEST_LOADING: 'hlsManifestLoading',\n  MANIFEST_LOADED: 'hlsManifestLoaded',\n  MANIFEST_PARSED: 'hlsManifestParsed',\n  LEVEL_SWITCHING: 'hlsLevelSwitching',\n  LEVEL_SWITCHED: 'hlsLevelSwitched',\n  LEVEL_LOADING: 'hlsLevelLoading',\n  LEVEL_LOADED: 'hlsLevelLoaded',\n  LEVEL_UPDATED: 'hlsLevelUpdated',\n  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',\n  LEVELS_UPDATED: 'hlsLevelsUpdated',\n  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',\n  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',\n  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',\n  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',\n  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',\n  SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',\n  SUBTITLE_TRACKS_CLEARED: 'hlsSubtitleTracksCleared',\n  SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',\n  SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',\n  SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',\n  SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',\n  CUES_PARSED: 'hlsCuesParsed',\n  NON_NATIVE_TEXT_TRACKS_FOUND: 'hlsNonNativeTextTracksFound',\n  INIT_PTS_FOUND: 'hlsInitPtsFound',\n  FRAG_LOADING: 'hlsFragLoading',\n  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',\n  FRAG_LOADED: 'hlsFragLoaded',\n  FRAG_DECRYPTED: 'hlsFragDecrypted',\n  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',\n  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',\n  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',\n  FRAG_PARSED: 'hlsFragParsed',\n  FRAG_BUFFERED: 'hlsFragBuffered',\n  FRAG_CHANGED: 'hlsFragChanged',\n  FPS_DROP: 'hlsFpsDrop',\n  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',\n  ERROR: 'hlsError',\n  DESTROYING: 'hlsDestroying',\n  KEY_LOADING: 'hlsKeyLoading',\n  KEY_LOADED: 'hlsKeyLoaded',\n  LIVE_BACK_BUFFER_REACHED: 'hlsLiveBackBufferReached',\n  BACK_BUFFER_REACHED: 'hlsBackBufferReached'\n};\n\nexport const CUSTOM_AUDIO_EVENTS = Object.freeze({\n  AUDIO_X_STATE: 'AUDIO_X_STATE'\n});\n","import HlsAdapter from 'adapters/hls';\nimport { AudioX } from 'audio';\nimport { isValidArray } from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport {\n  AudioEvents,\n  EventListenerCallbackMap,\n  EventListenersList,\n  HlsEvents,\n  HlsEventsCallbackMap\n} from 'types/audioEvents.types';\nimport { HlsListeners } from '../types/hls.js.js';\nimport { AUDIO_EVENTS, HLS_EVENTS } from './audioEvents';\n\n/**\n * this attaches event listeners, for audio also sends a flag to calculate playLog\n * loops through the event listeners map and attaches it to the audio element\n */\nconst attachEventListeners = (\n  eventListenersCallbackMap: EventListenerCallbackMap,\n  playLogEnabled: boolean = false\n) => {\n  const audioInstance = AudioX.getAudioInstance();\n  isValidArray(Object.keys(eventListenersCallbackMap)) &&\n    Object.keys(eventListenersCallbackMap).forEach((evt) => {\n      let event = evt as keyof AudioEvents;\n      audioInstance?.addEventListener(AUDIO_EVENTS[event], (e: Event) => {\n        if (evt && eventListenersCallbackMap[event]) {\n          const listenerCallback = eventListenersCallbackMap[event];\n          if (typeof listenerCallback === 'function') {\n            listenerCallback(e, audioInstance, playLogEnabled);\n          }\n        }\n      });\n    });\n};\n\nconst attachCustomEventListeners = (\n  eventListenersList: EventListenersList,\n  enablePlayLog: boolean = false\n) => {\n  const audioInstance = AudioX.getAudioInstance();\n  if (isValidArray(eventListenersList)) {\n    eventListenersList.forEach((evt) => {\n      let event = evt as keyof AudioEvents;\n      if (Object.keys(AUDIO_EVENTS).includes(event)) {\n        audioInstance?.addEventListener(AUDIO_EVENTS[event], (e: Event) => {\n          ChangeNotifier.notify(AUDIO_EVENTS[event], {\n            e,\n            audioInstance,\n            enablePlayLog\n          });\n        });\n      }\n    });\n  }\n};\n\nconst attachHlsEventsListeners = (\n  hlsEventlistenerCallbackMap: HlsEventsCallbackMap,\n  playLogEnabled: boolean = false\n) => {\n  const hls = new HlsAdapter();\n  const hlsInstance = hls.getHlsInstance();\n  isValidArray(Object.keys(hlsEventlistenerCallbackMap)) &&\n    Object.keys(hlsEventlistenerCallbackMap).forEach((evt) => {\n      let event = evt as keyof HlsEvents;\n      hlsInstance.on(\n        HLS_EVENTS[event] as keyof HlsListeners,\n        (e: any, data: any) => {\n          if (event && hlsEventlistenerCallbackMap[event]) {\n            const listenerCallback = hlsEventlistenerCallbackMap[event];\n            if (typeof listenerCallback === 'function') {\n              listenerCallback(e, data, hlsInstance, playLogEnabled);\n            }\n          }\n        }\n      );\n    });\n};\n\nexport {\n  attachCustomEventListeners,\n  attachEventListeners,\n  attachHlsEventsListeners\n};\n","declare global {\n  interface Window {\n    Hls: any;\n  }\n}\n\nimport { AudioX } from 'audio';\nimport { URLS } from 'constants/common';\nimport { HLS_EVENTS_CALLBACK_MAP } from 'events/hlsEvents';\nimport { attachHlsEventsListeners } from 'events/listeners';\nimport { loadScript } from 'helpers/common';\nimport { MediaTrack } from 'types';\nimport type Hls from 'types/hls.js.js';\nimport type { HlsConfig } from 'types/hls.js.js';\n\nlet hlsInstance: Hls;\n\nclass HlsAdapter {\n  private static _instance: HlsAdapter;\n  private HlsClass: typeof Hls;\n\n  constructor() {\n    if (HlsAdapter._instance) {\n      console.warn(\n        'Instantiation failed: cannot create multiple instance of HLS returning existing instance'\n      );\n      return HlsAdapter._instance;\n    }\n    HlsAdapter._instance = this;\n  }\n\n  async load() {\n    await loadScript(\n      URLS.HLS,\n      () => {\n        console.log('HLS Loaded');\n      },\n      'hls'\n    )\n      .then(() => {\n        this.HlsClass = window.Hls;\n        window.Hls = undefined;\n      })\n      .catch((msg: string) => {\n        console.log(msg);\n      });\n\n    return this.HlsClass;\n  }\n\n  async init(config: HlsConfig | {} = {}, enablePlayLog: boolean) {\n    const Hls = await this.load();\n    if (Hls.isSupported()) {\n      hlsInstance = new Hls(config);\n      attachHlsEventsListeners(HLS_EVENTS_CALLBACK_MAP, enablePlayLog);\n    }\n  }\n\n  addHlsMedia(mediaTrack: MediaTrack) {\n    const Hls = this.HlsClass;\n    const audioInstance = AudioX.getAudioInstance();\n    hlsInstance.loadSource(mediaTrack.source);\n    hlsInstance.attachMedia(audioInstance);\n    hlsInstance.on(Hls.Events.MEDIA_ATTACHED, function () {\n      console.log('hls media attached');\n    });\n  }\n\n  getHlsInstance() {\n    return hlsInstance;\n  }\n}\n\nexport default HlsAdapter;\n","import { ErrorEvents } from 'types/errorEvents.types';\n\nexport const ERROR_EVENTS: ErrorEvents = Object.freeze({\n  1: 'MEDIA_ERR_ABORTED',\n  3: 'MEDIA_ERR_DECODE',\n  2: 'MEDIA_ERR_NETWORK',\n  4: 'MEDIA_ERR_SRC_NOT_SUPPORTED',\n});\n","import { PLAYBACK_STATE } from 'constants/common';\nimport {\n  calculateActualPlayedLength,\n  getBufferedDuration,\n  getReadableErrorMessage\n} from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { AudioState, EventListenerCallbackMap } from 'types';\nimport { ERROR_EVENTS } from './errorEvents';\n\nconst notifier = ChangeNotifier;\n\nconst BASE_EVENT_CALLBACK_MAP: EventListenerCallbackMap = {\n  LOAD_START: (e, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  DURATION_CHANGE: (e, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState:\n          audioState.playbackState === 'playing'\n            ? PLAYBACK_STATE.PLAYING // fix for live streams where duration change is fired even when audio is playing\n            : PLAYBACK_STATE.DURATION_CHANGE,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  LOADED_META_DATA: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  LOADED_DATA: (e, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const bufferedDuration = getBufferedDuration(audioInstance);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  CAN_PLAY: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState:\n          audioState.playbackState === 'paused'\n            ? PLAYBACK_STATE.PAUSED\n            : PLAYBACK_STATE.READY,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      } as AudioState,\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  CAN_PLAY_THROUGH: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    const isPaused = audioInstance.paused;\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    /* below we check if the audio was already in paused state then we keep\n     it as paused instead going to ready this make sure ready is fired only on the first load.*/\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: isPaused\n          ? PLAYBACK_STATE.PAUSED\n          : audioState.playbackState === 'playing'\n          ? PLAYBACK_STATE.PLAYING // fix for live streams as canplaythrough event is can be behave weirdly as there is no known end to the media\n          : PLAYBACK_STATE.READY,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  PLAY: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.PLAYING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  PLAYING: (e, audioInstance) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.PLAYING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  PAUSE: (e: Event, audioInstance: HTMLAudioElement, playLogEnabled) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.PAUSED,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n    if (playLogEnabled) {\n      calculateActualPlayedLength(audioInstance, 'PAUSE');\n    }\n  },\n\n  ENDED: (e: Event, audioInstance: HTMLAudioElement, playLogEnabled) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.ENDED,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n    if (playLogEnabled) {\n      calculateActualPlayedLength(audioInstance, 'ENDED');\n    }\n  },\n\n  ERROR: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const errorCode = audioInstance.error?.code as keyof typeof ERROR_EVENTS;\n    const message = getReadableErrorMessage(audioInstance);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.ERROR,\n        error: {\n          code: errorCode,\n          message: ERROR_EVENTS[errorCode],\n          readable: message\n        }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  TIME_UPDATE: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: audioInstance.paused\n          ? audioState?.playbackState\n          : PLAYBACK_STATE.PLAYING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  WAITING: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  VOLUME_CHANGE: (e: Event) => {\n    console.log('STATUS', e.type);\n    notifier.notify('AUDIO_STATE', {}, `audiox_baseEvents_state`);\n  },\n\n  SEEKED: (e: any, audioInstance: HTMLAudioElement) => {\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    const bufferedDuration = getBufferedDuration(audioInstance);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState:\n          audioState.playbackState === 'paused'\n            ? 'paused'\n            : audioState.playbackState,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' },\n        bufferedDuration\n      } as AudioState,\n      `audiox_baseEvents_state_${e.type}`\n    );\n  }\n};\n\nexport { BASE_EVENT_CALLBACK_MAP };\n","import { AudioX } from 'audio';\nimport { metaDataCreator } from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { AudioState } from 'types';\n\nexport const updateMetaData = (data: any) => {\n  if ('mediaSession' in navigator) {\n    navigator.mediaSession.metadata = new MediaMetadata(metaDataCreator(data));\n  }\n};\n\nexport const attachMediaSessionHandlers = () => {\n  const audio = new AudioX();\n  if ('mediaSession' in navigator) {\n    navigator.mediaSession.setActionHandler('play', () => {\n      const audioInstance = AudioX.getAudioInstance();\n      audioInstance.play();\n    });\n\n    navigator.mediaSession.setActionHandler('pause', () => {\n      const audioInstance = AudioX.getAudioInstance();\n      audioInstance.pause();\n    });\n\n    // Only add next and previous handler if there is a valid queue\n    if (audio.getQueue().length) {\n      navigator.mediaSession.setActionHandler('previoustrack', () => {\n        audio.playPrevious();\n      });\n\n      navigator.mediaSession.setActionHandler('nexttrack', () => {\n        audio.playNext();\n      });\n    }\n  }\n};\n\nexport const updatePositionState = () => {\n  ChangeNotifier.listen('AUDIO_X_STATE', (audioState: AudioState) => {\n    if (\n      audioState?.duration &&\n      audioState?.playbackRate &&\n      audioState?.progress\n    ) {\n      navigator.mediaSession.setPositionState({\n        duration: audioState.duration,\n        playbackRate: audioState.playbackRate,\n        position: audioState.progress\n      });\n    }\n  });\n};\n","import { PLAYBACK_STATE } from 'constants/common';\nimport { diffChecker } from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { ReadyState } from 'types';\nimport { AudioState, MediaTrack } from 'types/audio.types';\n\nexport const READY_STATE: ReadyState = {\n  HAVE_NOTHING: 0,\n  HAVE_METADATA: 1,\n  HAVE_CURRENT_DATA: 2,\n  HAVE_FUTURE_DATA: 3,\n  HAVE_ENOUGH_DATA: 4\n};\n\nexport const AUDIO_STATE: AudioState = {\n  playbackState: PLAYBACK_STATE.IDLE,\n  duration: 0,\n  bufferedDuration: 0,\n  progress: 0,\n  volume: 50,\n  playbackRate: 1,\n  error: {\n    code: null,\n    message: '',\n    readable: ''\n  },\n  currentTrack: {} as MediaTrack,\n  currentTrackPlayTime: 0,\n  previousTrackPlayTime: 0\n};\n\n/* Listen to state changes and update global audio state that is being exposed to outer world\n  Do not subscribe to this event, this may cause unexpected behavior instead attach your own custom\n  event listener, if you wish to have granular control on audio state. See: attachCustomEventListener \n*/\nChangeNotifier.listen(\n  'AUDIO_STATE',\n  (audioState: AudioState) => {\n    const latestState = ChangeNotifier.getLatestState(\n      'AUDIO_X_STATE'\n    ) as AudioState;\n    if (!diffChecker(latestState, audioState)) {\n      ChangeNotifier.notify('AUDIO_X_STATE', { ...AUDIO_STATE, ...audioState });\n    }\n  },\n  AUDIO_STATE\n);\n","import { Equalizer } from 'adapters/equalizer';\nimport HlsAdapter from 'adapters/hls';\nimport { AUDIO_X_CONSTANTS, PLAYBACK_STATE } from 'constants/common';\nimport { BASE_EVENT_CALLBACK_MAP } from 'events/baseEvents';\nimport { attachEventListeners } from 'events/listeners';\nimport {\n  calculateActualPlayedLength,\n  handleQueuePlayback,\n  isValidArray,\n  isValidFunction,\n  shuffle\n} from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\n\nimport {\n  attachMediaSessionHandlers,\n  updateMetaData\n} from 'mediasession/mediasessionHandler';\nimport { READY_STATE } from 'states/audioState';\nimport {\n  AudioInit,\n  MediaTrack,\n  PlaybackRate,\n  QueuePlaybackType\n} from 'types/audio.types';\nimport { EqualizerStatus, Preset } from 'types/equalizer.types';\n\nlet audioInstance: HTMLAudioElement;\nconst notifier = ChangeNotifier;\n\nclass AudioX {\n  private _audio: HTMLAudioElement;\n  private isPlayLogEnabled: Boolean;\n  private static _instance: AudioX;\n  private _queue: MediaTrack[];\n  private _currentQueueIndex: number = 0;\n  private _fetchFn: (mediaTrack: MediaTrack) => Promise<void>;\n  private eqStatus: EqualizerStatus = 'IDEAL';\n  private isEqEnabled: boolean = false;\n  private eqInstance: Equalizer;\n  private showNotificationsActions: boolean = false;\n\n  constructor() {\n    if (AudioX._instance) {\n      console.warn(\n        'Instantiation failed: cannot create multiple instance of AudioX returning existing instance'\n      );\n      return AudioX._instance;\n    }\n    if (\n      process.env.NODE_ENV !== AUDIO_X_CONSTANTS?.DEVELOPMENT &&\n      audioInstance\n    ) {\n      throw new Error('Cannot create multiple audio instance');\n    }\n\n    AudioX._instance = this;\n    this._audio = new Audio();\n    audioInstance = this._audio;\n  }\n\n  /**\n   *\n   * @param initProps  initial config to initialize AudioX\n   * @param initProps.mediaTrack mediaTrack Object containing metadata and source of the media\n   * @param initProps.mediaTrack.title title of the Audio\n   * @param initProps.mediaTrack.source URI of the Audio\n   * @param initProps.mediaTrack.artwork artwork of the Audio\n   * @param initProps.mediaTrack.duration  duration of the audio\n   * @param initProps.mediaTrack.genre genre of the audio\n   * @param initProps.mediaTrack.album album of the audio\n   * @param initProps.mediaTrack.comment comment for the audio\n   * @param initProps.mediaTrack.year release year of the audio\n   * @param initProps.mediaTrack.artist artist of the audio\n   * @param mode mode of operation for AudioX\n   * @param autoplay flag for autoplay\n   * @param preloadStrategy strategy for preloading audio\n   * @param playbackRate default playbackRate of the audio\n   * @param attachAudioEventListeners flag for registering audio events\n   * @param attachMediaSessionHandlers flag for registering mediaSession handlers\n   */\n\n  async init(initProps: AudioInit) {\n    const {\n      preloadStrategy = 'auto',\n      autoPlay = false,\n      useDefaultEventListeners = true,\n      customEventListeners = null,\n      showNotificationActions = false,\n      enablePlayLog = false,\n      enableHls = false,\n      enableEQ = false,\n      crossOrigin = null,\n      hlsConfig = {}\n    } = initProps;\n\n    this._audio?.setAttribute('id', 'audio_x_instance');\n    this._audio.preload = preloadStrategy;\n    this._audio.autoplay = autoPlay;\n    this._audio.crossOrigin = crossOrigin;\n    this.isPlayLogEnabled = enablePlayLog;\n    this.isEqEnabled = enableEQ;\n\n    if (customEventListeners !== null) {\n      if (useDefaultEventListeners) {\n        console.warn(\n          `useDefaultEventListeners is set to true at init, are you trying to use the default event listeners?\n            set customEventListeners to null to use default event listeners`\n        );\n      }\n      attachEventListeners(customEventListeners, false);\n    } else {\n      attachEventListeners(BASE_EVENT_CALLBACK_MAP, enablePlayLog);\n    }\n\n    if (showNotificationActions) {\n      this.showNotificationsActions = true;\n      attachMediaSessionHandlers();\n    }\n\n    if (enableHls) {\n      const hls = new HlsAdapter();\n      hls.init(hlsConfig, enablePlayLog);\n    }\n  }\n\n  async addMedia(\n    mediaTrack: MediaTrack,\n    mediaFetchFn?: (mediaTrack: MediaTrack) => Promise<void>\n  ) {\n    if (!mediaTrack) {\n      return;\n    }\n\n    if (mediaFetchFn && !mediaTrack.source.length) {\n      this._fetchFn = mediaFetchFn;\n    }\n\n    const queue = this.getQueue();\n    if (isValidArray(queue)) {\n      const index = queue.findIndex((track) => mediaTrack.id === track.id);\n      if (index > -1) {\n        this._currentQueueIndex = index;\n      }\n    }\n\n    const mediaType = mediaTrack.source.includes('.m3u8') ? 'HLS' : 'DEFAULT';\n\n    if (this.isPlayLogEnabled) {\n      calculateActualPlayedLength(audioInstance, 'TRACK_CHANGE');\n    }\n\n    if (\n      mediaType === 'HLS' &&\n      !audioInstance.canPlayType('application/vnd.apple.mpegurl')\n    ) {\n      const hls = new HlsAdapter();\n      const hlsInstance = hls.getHlsInstance();\n      if (hlsInstance) {\n        hlsInstance.detachMedia();\n        hls.addHlsMedia(mediaTrack);\n      } else {\n        console.warn(\n          'The source provided seems to be a HLS stream but, hls playback is not enabled. Please have a look at init method of AudioX'\n        );\n        await this.reset();\n      }\n    } else {\n      audioInstance.src = mediaTrack.source;\n    }\n\n    notifier.notify('AUDIO_STATE', {\n      playbackState: PLAYBACK_STATE.TRACK_CHANGE,\n      currentTrackPlayTime: 0,\n      currentTrack: mediaTrack\n    });\n\n    updateMetaData(mediaTrack);\n    audioInstance.load();\n  }\n\n  attachEq() {\n    if (this.eqStatus === 'IDEAL') {\n      try {\n        const eq = new Equalizer();\n        this.eqStatus = eq.status();\n        this.eqInstance = eq;\n      } catch (e) {\n        console.log('failed to enable equalizer');\n      }\n    }\n  }\n\n  async play() {\n    const isSourceAvailable = audioInstance.src !== '';\n    if (\n      audioInstance?.paused &&\n      audioInstance.HAVE_ENOUGH_DATA === READY_STATE.HAVE_ENOUGH_DATA &&\n      isSourceAvailable\n    ) {\n      await audioInstance\n        .play()\n        .then(() => {\n          console.log('PLAYING');\n        })\n        .catch(() => {\n          console.warn('cancelling current audio playback, track changed');\n        });\n    }\n    if (this.isEqEnabled) {\n      this.attachEq();\n    }\n  }\n\n  /**\n   *\n   * @param mediaTrack MediaTrack to be added and played\n   *\n   * Note: Use this method when you want to add media and do playback or want continuous playback\n   * You can also call addMedia and Play Separately to achieve playback.\n   */\n\n  async addMediaAndPlay(\n    mediaTrack?: MediaTrack | null,\n    fetchFn?: (mediaTrack: MediaTrack) => Promise<void>\n    // this should be passed when there something needs to be done before the audio starts playing\n  ) {\n    const currentTrack =\n      mediaTrack || (this._queue.length > 0 ? this._queue[0] : undefined);\n    if (fetchFn && isValidFunction(fetchFn) && currentTrack?.source.length) {\n      this._fetchFn = fetchFn;\n      await fetchFn(currentTrack as MediaTrack);\n    }\n    try {\n      if (currentTrack) {\n        this.addMedia(currentTrack).then(() => {\n          if (audioInstance.HAVE_ENOUGH_DATA === READY_STATE.HAVE_ENOUGH_DATA) {\n            setTimeout(async () => {\n              await this.play();\n              if (this.isEqEnabled) {\n                this.attachEq();\n              }\n            }, 950);\n          }\n        });\n      } else {\n        console.error('Playback Failed, No MediaTrack Provided');\n      }\n    } catch (error) {\n      console.error('Playback Failed');\n    }\n  }\n\n  pause() {\n    if (audioInstance && !audioInstance?.paused) {\n      audioInstance?.pause();\n    }\n  }\n\n  stop() {\n    if (audioInstance && !audioInstance.paused) {\n      audioInstance?.pause();\n      audioInstance.currentTime = 0;\n    }\n  }\n\n  /**\n   * @method reset :  This stops the playback and resets all the state of the audio\n   */\n  async reset() {\n    if (audioInstance) {\n      this.stop();\n      audioInstance.src = '';\n      audioInstance.srcObject = null;\n    }\n  }\n\n  /**\n   * @param volume : numeric value between 1-100 to be used.\n   */\n  setVolume(volume: number) {\n    const actualVolume = volume / 100;\n    if (audioInstance) {\n      audioInstance.volume = actualVolume;\n      notifier.notify('AUDIO_STATE', {\n        volume: volume\n      });\n    }\n  }\n  /**\n   * @param playbackRate : a number denoting speed at which the playback should happen,\n   */\n  setPlaybackRate(playbackRate: PlaybackRate) {\n    if (audioInstance) {\n      audioInstance.playbackRate = playbackRate;\n      notifier.notify('AUDIO_STATE', {\n        playbackRate\n      });\n    }\n  }\n\n  mute() {\n    if (audioInstance && !audioInstance.muted) {\n      audioInstance.muted = true;\n    }\n  }\n\n  seek(time: number) {\n    if (audioInstance) {\n      audioInstance.currentTime = time;\n    }\n  }\n\n  seekBy(time: number) {\n    if (audioInstance && audioInstance.currentTime) {\n      const currentProgress = audioInstance.currentTime;\n      audioInstance.currentTime = currentProgress + time;\n    }\n  }\n\n  async destroy() {\n    if (audioInstance) {\n      await this.reset();\n      audioInstance.removeAttribute('src');\n      audioInstance.load();\n    }\n  }\n\n  subscribe(eventName: string, callback: (data: any) => void, state: any = {}) {\n    const unsubscribe = notifier.listen(eventName, callback, state);\n    return unsubscribe;\n  }\n\n  addEventListener(\n    event: keyof HTMLMediaElementEventMap,\n    callback: (data: any) => void\n  ) {\n    audioInstance.addEventListener(event, callback);\n  }\n\n  getPresets() {\n    return Equalizer.getPresets();\n  }\n\n  setPreset(id: keyof Preset) {\n    if (this.isEqEnabled) {\n      this.eqInstance.setPreset(id);\n    } else {\n      console.error('Equalizer not initialized, please set enableEq at init');\n    }\n  }\n\n  setCustomEQ(gains: number[]) {\n    if (this.isEqEnabled) {\n      this.eqInstance.setCustomEQ(gains);\n    } else {\n      console.error('Equalizer not initialized, please set enableEq at init');\n    }\n  }\n\n  setBassBoost(enabled: boolean, boost: number) {\n    if (this.isEqEnabled) {\n      this.eqInstance.setBassBoost(enabled, boost);\n    } else {\n      console.error('Equalizer not initialized, please set enableEq at init');\n    }\n  }\n\n  addQueue(queue: MediaTrack[], playbackType: QueuePlaybackType) {\n    this.clearQueue();\n    const playerQueue = isValidArray(queue) ? queue.slice() : [];\n    switch (playbackType) {\n      case 'DEFAULT':\n        this._queue = playerQueue;\n        break;\n      case 'REVERSE':\n        this._queue = playerQueue.reverse();\n        break;\n      case 'SHUFFLE':\n        this._queue = shuffle(playerQueue);\n        break;\n      default:\n        this._queue = playerQueue;\n        break;\n    }\n    handleQueuePlayback();\n    /* Attaching MediaSession Handler again as this will make sure that\n     the next and previous button show up in notification */\n    if (this.showNotificationsActions) {\n      attachMediaSessionHandlers();\n    }\n  }\n\n  playNext() {\n    const index = this._currentQueueIndex + 1;\n    if (this?._queue?.length > index) {\n      const nextTrack = this._queue[index];\n      this.addMediaAndPlay(nextTrack, this._fetchFn);\n      this._currentQueueIndex = index;\n    } else {\n      // stop the audio and end trigger queue ended\n      this.stop();\n      notifier.notify('AUDIO_STATE', {\n        playbackState: PLAYBACK_STATE.QUEUE_ENDED\n      });\n    }\n  }\n\n  playPrevious() {\n    const index = this?._currentQueueIndex - 1;\n\n    if (index >= 0) {\n      const previousTrack = this?._queue[index];\n      this.addMediaAndPlay(previousTrack, this._fetchFn);\n      this._currentQueueIndex = index;\n    } else {\n      console.log('At the beginning of the queue');\n    }\n  }\n\n  clearQueue() {\n    if (this._queue && isValidArray(this._queue)) {\n      this._queue = [];\n      this._currentQueueIndex = 0;\n    }\n  }\n\n  addToQueue(mediaTracks: MediaTrack | MediaTrack[]) {\n    if (this._queue && isValidArray(this._queue)) {\n      if (Array.isArray(mediaTracks)) {\n        this._queue = [...this._queue, ...mediaTracks];\n      } else {\n        this._queue.push(mediaTracks);\n      }\n    }\n  }\n\n  removeFromQueue(mediaTrack: MediaTrack) {\n    if (this._queue && isValidArray(this._queue)) {\n      const queue = this._queue.filter(\n        (track: MediaTrack) => track.id == mediaTrack.id\n      );\n      this._queue = queue;\n    }\n  }\n\n  getQueue() {\n    return this._queue && isValidArray(this._queue) ? this._queue : [];\n  }\n\n  get id() {\n    return audioInstance?.getAttribute('id');\n  }\n\n  static getAudioInstance() {\n    return audioInstance;\n  }\n}\n\nexport { AudioX };\n"]}