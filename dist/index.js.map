{"version":3,"sources":["../src/constants/equalizer.ts","../src/constants/common.ts","../src/helpers/notifier.ts","../src/helpers/common.ts","../src/adapters/equalizer.ts","../src/events/hlsEvents.ts","../src/events/audioEvents.ts","../src/events/listeners.ts","../src/adapters/hls.ts","../src/events/errorEvents.ts","../src/events/baseEvents.ts","../src/mediasession/mediasessionHandler.ts","../src/states/audioState.ts","../src/audio.ts"],"names":["bands","frequency","type","gain","presets","id","name","gains","AUDIO_X_CONSTANTS","Object","freeze","REACT","VANILLA","DEVELOPMENT","PLAYBACK_STATE","BUFFERING","PLAYING","PAUSED","READY","IDLE","ENDED","STALLED","ERROR","TRACK_CHANGE","DURATION_CHANGE","ERROR_MSG_MAP","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","DEFAULT","URLS","HLS","_a","ChangeNotifier","validateEventName","eventName","Error","notify","data","caller","listenerCbs","listeners","notifierState","forEach","cb","listen","callback","state","add","Set","eventListeners","delete","size","multiListen","callbacks","Array","isArray","length","unsubscribeFunctions","map","unsubscribe","getLatestState","__publicField","notifier_default","isValidArray","__name","arr","isValidWindow","window","undefined","Window","loadedScripts","getReadableErrorMessage","audioInstance","message","error","code","MediaError","metaDataCreator","mediaTrack","title","album","artist","artwork","artworkUrl","src","artworkMap","el","sizes","previousTrackPlayTime","calculateActualPlayedLength","event","lengthSet","i","played","startX","start","width","end","currentTrackPlayTime","reduce","acc","val","includes","loadScript","url","onLoad","Promise","resolve","reject","document","script","createElement","async","onload","head","appendChild","Equalizer","constructor","audioCtx","audioCtxStatus","eqFilterBands","_instance","AudioContext","init","webkitAudioContext","resume","setTimeout","body","removeEventListener","addEventListener","AudioX","getAudioInstance","audioSource","createMediaElementSource","equalizerBands","band","filter","createBiquadFilter","value","Q","gainNode","createGain","connect","destination","setPreset","preset","find","getPresets","status","setCustomEQ","index","HLS_EVENTS_CALLBACK_MAP","e","detail","details","isFatal","fatal","playbackState","FRAG_CHANGED","AUDIO_EVENTS","ABORT","TIME_UPDATE","CAN_PLAY","CAN_PLAY_THROUGH","EMPTIED","WAITING","SEEKING","SEEKED","LOADED_META_DATA","LOADED_DATA","PLAY","PAUSE","RATE_CHANGE","VOLUME_CHANGE","SUSPEND","PROGRESS","LOAD_START","HLS_EVENTS","MEDIA_ATTACHING","MEDIA_ATTACHED","MEDIA_DETACHING","MEDIA_DETACHED","BUFFER_RESET","BUFFER_CODECS","BUFFER_CREATED","BUFFER_APPENDING","BUFFER_APPENDED","BUFFER_EOS","BUFFER_FLUSHING","BUFFER_FLUSHED","MANIFEST_LOADING","MANIFEST_LOADED","MANIFEST_PARSED","LEVEL_SWITCHING","LEVEL_SWITCHED","LEVEL_LOADING","LEVEL_LOADED","LEVEL_UPDATED","LEVEL_PTS_UPDATED","LEVELS_UPDATED","AUDIO_TRACKS_UPDATED","AUDIO_TRACK_SWITCHING","AUDIO_TRACK_SWITCHED","AUDIO_TRACK_LOADING","AUDIO_TRACK_LOADED","SUBTITLE_TRACKS_UPDATED","SUBTITLE_TRACKS_CLEARED","SUBTITLE_TRACK_SWITCH","SUBTITLE_TRACK_LOADING","SUBTITLE_TRACK_LOADED","SUBTITLE_FRAG_PROCESSED","CUES_PARSED","NON_NATIVE_TEXT_TRACKS_FOUND","INIT_PTS_FOUND","FRAG_LOADING","FRAG_LOAD_EMERGENCY_ABORTED","FRAG_LOADED","FRAG_DECRYPTED","FRAG_PARSING_INIT_SEGMENT","FRAG_PARSING_USERDATA","FRAG_PARSING_METADATA","FRAG_PARSED","FRAG_BUFFERED","FPS_DROP","FPS_DROP_LEVEL_CAPPING","DESTROYING","KEY_LOADING","KEY_LOADED","LIVE_BACK_BUFFER_REACHED","BACK_BUFFER_REACHED","CUSTOM_AUDIO_EVENTS","AUDIO_X_STATE","attachEventListeners","eventListenersCallbackMap","playLogEnabled","keys","evt","listenerCallback","attachHlsEventsListeners","hlsEventlistenerCallbackMap","hlsInstance","HlsAdapter","getHlsInstance","on","HlsClass","load","then","Hls","catch","msg","config","enablePlayLog","isSupported","addHlsMedia","loadSource","source","attachMedia","Events","hls_default","ERROR_EVENTS","notifier","BASE_EVENT_CALLBACK_MAP","duration","readable","audioState","progress","currentTime","errorCode","paused","updateMetaData","navigator","mediaSession","metadata","MediaMetadata","attachMediaSessionHandlers","setActionHandler","play","pause","READY_STATE","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","AUDIO_STATE","bufferedDuration","volume","playbackRate","currentTrack","_audio","isPlayLogEnabled","eqStatus","isEqEnabled","eqInstance","process","env","NODE_ENV","Audio","initProps","preloadStrategy","autoPlay","useDefaultEventListeners","customEventListeners","showNotificationActions","enableHls","enableEQ","crossOrigin","hlsConfig","setAttribute","preload","autoplay","addMedia","mediaType","hls","detachMedia","reset","attachEq","eq","isSourceAvailable","addMediaAndPlay","stop","srcObject","setVolume","actualVolume","setPlaybackRate","mute","muted","seek","time","destroy","removeAttribute","subscribe","getAttribute"],"mappings":"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","sourcesContent":["import { Band, Preset } from 'types/equalizer.types';\n\nconst bands: Band[] = [\n  { frequency: 31, type: 'lowshelf', gain: 0 }, // Band 0: 31 Hz - Low Shelf Filter\n  { frequency: 63, type: 'peaking', gain: 0 }, // Band 1: 63 Hz - Peaking Filter\n  { frequency: 125, type: 'peaking', gain: 0 }, // Band 2: 125 Hz - Peaking Filter\n  { frequency: 250, type: 'peaking', gain: 0 }, // Band 3: 250 Hz - Peaking Filter\n  { frequency: 500, type: 'peaking', gain: 0 }, // Band 4: 500 Hz - Peaking Filter\n  { frequency: 1000, type: 'peaking', gain: 0 }, // Band 5: 1 kHz - Peaking Filter\n  { frequency: 2000, type: 'peaking', gain: 0 }, // Band 6: 2 kHz - Peaking Filter\n  { frequency: 4000, type: 'peaking', gain: 0 }, // Band 7: 4 kHz - Peaking Filter\n  { frequency: 8000, type: 'peaking', gain: 0 }, // Band 8: 8 kHz - Peaking Filter\n  { frequency: 16000, type: 'highshelf', gain: 0 } // Band 9: 16 kHz - High Shelf Filter\n];\n\nconst presets: Preset[] = [\n  {\n    id: 'preset_default',\n    name: 'Default',\n    gains: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  },\n  {\n    id: 'preset_live',\n    name: 'Live',\n    gains: [-1.0, 1.0, 3.0, 4.0, 4.0, 4.0, 3.0, 2.0, 2.0, 2.0]\n  },\n  {\n    id: 'preset_acoustic',\n    name: 'Acoustic',\n    gains: [6.0, 6.0, 4.0, 1.0, 3.0, 3.0, 4.0, 5.0, 4.0, 1.5]\n  },\n  {\n    id: 'preset_classical',\n    name: 'Classical',\n    gains: [6.0, 5.0, 4.0, 3.0, -1.0, -1.0, 0.0, 2.0, 4.0, 5.0]\n  },\n  {\n    id: 'preset_piano',\n    name: 'Piano',\n    gains: [4.0, 2.0, 0.0, 3.5, 4.0, 1.5, 5.0, 6.0, 4.0, 4.5]\n  },\n  {\n    id: 'preset_lounge',\n    name: 'Lounge',\n    gains: [-3.0, -1.5, 0.0, 1.0, 5.5, 1.0, 0.0, -1.5, 2.0, 0.5]\n  },\n  {\n    id: 'preset_spoken_word',\n    name: 'Spoken Word',\n    gains: [-2.0, 0.0, 0.0, 1.0, 5.0, 6.5, 7.0, 6.0, 3.0, 0.0]\n  },\n  {\n    id: 'preset_jazz',\n    name: 'Jazz',\n    gains: [5.5, 4.0, 1.0, 2.0, -1.5, -1.5, 0.0, 1.0, 4.0, 5.5]\n  },\n  {\n    id: 'preset_pop',\n    name: 'Pop',\n    gains: [0.5, 2.4, 3.8, 4.3, 3.0, 0.0, -0.5, -0.5, 0.5, 0.5]\n  },\n  {\n    id: 'preset_dance',\n    name: 'Dance',\n    gains: [5.0, 10.0, 6.5, 0.0, 2.0, 4.5, 7.5, 7.0, 5.5, 0.0]\n  },\n  {\n    id: 'preset_latin',\n    name: 'Latin',\n    gains: [3.5, 1.5, 0.0, 0.0, -1.5, -1.5, -1.5, 0.0, 4.0, 6.5]\n  },\n  {\n    id: 'preset_rnb',\n    name: 'RnB',\n    gains: [3.5, 10.5, 8.5, 1.0, -3.0, -1.5, 3.0, 3.5, 4.0, 5.0]\n  },\n  {\n    id: 'preset_hiphop',\n    name: 'HipHop',\n    gains: [7.0, 6.0, 1.0, 4.0, -1.0, -0.5, 1.0, -0.5, 2.0, 4.0]\n  },\n  {\n    id: 'preset_electronic',\n    name: 'Electronic',\n    gains: [6.0, 5.5, 1.0, 0.0, -2.0, 2.0, 1.0, 1.5, 5.5, 6.5]\n  },\n  {\n    id: 'preset_techno',\n    name: 'Techno',\n    gains: [3.8, 2.4, 0.0, -2.4, -1.9, 0.0, 3.8, 4.8, 4.8, 4.3]\n  },\n  {\n    id: 'preset_deep',\n    name: 'Deep',\n    gains: [6.0, 5.0, 1.5, 0.5, 4.0, 3.0, 1.5, -2.0, -5.0, -6.5]\n  },\n  {\n    id: 'preset_club',\n    name: 'Club',\n    gains: [0.0, 0.0, 3.8, 2.4, 2.4, 2.4, 1.0, 0.0, 0.0, 0.0]\n  },\n  {\n    id: 'preset_rock',\n    name: 'Rock',\n    gains: [7.0, 5.5, 4.0, 1.0, -0.5, 0.0, 0.5, 3.0, 4.5, 6.5]\n  },\n  {\n    id: 'preset_rock_soft',\n    name: 'Rock Soft',\n    gains: [1.5, 0.0, 0.0, -0.5, 0.0, 1.0, 3.8, 4.8, 5.7, 6.2]\n  },\n  {\n    id: 'preset_ska',\n    name: 'Ska',\n    gains: [-0.5, -1.5, -1.0, 0.0, 1.0, 2.0, 3.8, 4.3, 5.2, 4.3]\n  },\n  {\n    id: 'preset_reggae',\n    name: 'Reggae',\n    gains: [0.0, 0.0, 0.0, -2.4, 0.0, 2.5, 2.5, 0.0, 0.0, 0.0]\n  },\n  {\n    id: 'preset_country',\n    name: 'Country',\n    gains: [3.0, 2.0, 1.0, 0.0, -1.0, 0.0, 2.0, 3.0, 4.0, 4.0]\n  },\n  {\n    id: 'preset_funk',\n    name: 'Funk',\n    gains: [4.0, 5.0, 3.0, 0.0, -1.0, 0.0, 2.0, 4.0, 5.0, 5.0]\n  },\n  {\n    id: 'preset_blues',\n    name: 'Blues',\n    gains: [2.0, 1.0, 0.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 3.0]\n  },\n  {\n    id: 'preset_metal',\n    name: 'Metal',\n    gains: [8.0, 7.0, 6.0, 4.0, 2.0, 1.0, 0.0, 2.0, 4.0, 6.0]\n  },\n  {\n    id: 'preset_indie',\n    name: 'Indie',\n    gains: [2.0, 3.0, 2.0, 1.0, 0.0, -1.0, -2.0, 0.0, 3.0, 4.0]\n  },\n  {\n    id: 'preset_chill',\n    name: 'Chill',\n    gains: [1.0, 1.0, 0.0, -1.0, -2.0, -1.0, 1.0, 2.0, 3.0, 2.0]\n  },\n  {\n    id: 'preset_world',\n    name: 'World',\n    gains: [3.0, 2.0, 0.0, -2.0, -1.0, 1.0, 3.0, 4.0, 5.0, 3.0]\n  },\n  {\n    id: 'preset_alternative',\n    name: 'Alternative',\n    gains: [3.0, 2.0, 1.0, 0.0, -1.0, -2.0, 1.0, 3.0, 4.0, 3.0]\n  },\n  {\n    id: 'preset_ambient',\n    name: 'Ambient',\n    gains: [0.0, -1.0, -2.0, -3.0, -2.0, 0.0, 1.0, 2.0, 3.0, 2.0]\n  },\n  {\n    id: 'preset_mellow',\n    name: 'Mellow',\n    gains: [1.0, 1.0, 0.0, -1.0, -2.0, -1.0, 1.0, 2.0, 3.0, 1.0]\n  },\n  {\n    id: 'preset_grunge',\n    name: 'Grunge',\n    gains: [5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 2.0, 4.0, 5.0]\n  },\n  {\n    id: 'preset_soul',\n    name: 'Soul',\n    gains: [3.0, 3.0, 2.0, 1.0, 0.0, -1.0, 0.0, 2.0, 3.0, 3.0]\n  },\n  {\n    id: 'preset_folk',\n    name: 'Folk',\n    gains: [2.0, 1.0, 0.0, -1.0, -2.0, -1.0, 1.0, 2.0, 3.0, 2.0]\n  },\n  {\n    id: 'preset_trap',\n    name: 'Trap',\n    gains: [7.0, 6.0, 3.0, 1.0, -2.0, -1.0, 1.0, 3.0, 6.0, 7.0]\n  },\n  {\n    id: 'preset_dubstep',\n    name: 'Dubstep',\n    gains: [6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.0, 3.0, 5.0, 6.0]\n  }\n];\n\nexport { bands, presets };\n","import { InitMode } from 'types';\nimport { ErrorMessageMap } from 'types/errorEvents.types';\n\nconst AUDIO_X_CONSTANTS = Object.freeze({\n  REACT: 'REACT' as InitMode,\n  VANILLA: 'VANILLA' as InitMode,\n  DEVELOPMENT: 'development'\n});\n\nconst PLAYBACK_STATE = Object.freeze({\n  BUFFERING: 'buffering',\n  PLAYING: 'playing',\n  PAUSED: 'paused',\n  READY: 'ready',\n  IDLE: 'idle',\n  ENDED: 'ended',\n  STALLED: 'stalled',\n  ERROR: 'error',\n  TRACK_CHANGE: 'trackchanged',\n  DURATION_CHANGE: 'durationchanged'\n});\n\nconst ERROR_MSG_MAP: ErrorMessageMap = Object.freeze({\n  MEDIA_ERR_ABORTED: 'The user canceled the audio.',\n  MEDIA_ERR_DECODE: 'An error occurred while decoding the audio.',\n  MEDIA_ERR_NETWORK: 'A network error occurred while fetching the audio.',\n  MEDIA_ERR_SRC_NOT_SUPPORTED:\n    'The audio is missing or is in a format not supported by your browser.',\n  DEFAULT: 'An unknown error occurred.'\n});\n\nconst URLS = {\n  HLS: 'https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js'\n};\n\nexport { AUDIO_X_CONSTANTS, ERROR_MSG_MAP, PLAYBACK_STATE, URLS };\n","type ListenerCallback<T> = (data: T) => void;\n\nclass ChangeNotifier {\n  private static listeners: Record<string, Set<ListenerCallback<any>>> = {};\n  private static notifierState: Record<string, any> = {};\n\n  private static validateEventName(eventName: string): void {\n    if (!eventName || typeof eventName !== 'string') {\n      throw new Error('Invalid event name');\n    }\n  }\n\n  static notify<T>(\n    eventName: string,\n    data: T,\n    caller: string = 'audiox_notifier_default'\n  ): void {\n    this.validateEventName(eventName);\n\n    const listenerCbs = ChangeNotifier.listeners[eventName];\n\n    if (!listenerCbs) return;\n\n    if (data !== null) {\n      console.log(`NOTIFYING TO EVENT : ${eventName} - CALLER : ${caller}`);\n\n      ChangeNotifier.notifierState[eventName] = {\n        ...(ChangeNotifier.notifierState[eventName] || {}),\n        ...data\n      };\n\n      listenerCbs.forEach((cb: ListenerCallback<any>) => {\n        cb(ChangeNotifier.notifierState[eventName]);\n      });\n    }\n  }\n\n  static listen<T>(\n    eventName: string,\n    callback: ListenerCallback<T>,\n    state = {}\n  ): () => void {\n    this.validateEventName(eventName);\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    if (!ChangeNotifier.listeners[eventName]) {\n      ChangeNotifier.notifierState[eventName] = state;\n      ChangeNotifier.listeners[eventName] = new Set([callback]);\n    } else {\n      ChangeNotifier.listeners[eventName].add(callback);\n    }\n\n    return (): void => {\n      const eventListeners = ChangeNotifier.listeners[eventName];\n\n      if (!eventListeners) {\n        console.log(`EVENT NOT FOUND : ${eventName}`);\n        return;\n      }\n\n      console.log(`REMOVING EVENT LISTENER FOR EVENT : ${eventName}`);\n\n      eventListeners.delete(callback);\n\n      if (eventListeners.size === 0) {\n        delete ChangeNotifier.listeners[eventName];\n      }\n    };\n  }\n\n  static multiListen<T>(\n    eventName: string,\n    callbacks: ListenerCallback<T>[],\n    state = {}\n  ): () => void {\n    this.validateEventName(eventName);\n\n    if (!Array.isArray(callbacks) || callbacks.length === 0) {\n      throw new Error('Callbacks must be a non-empty array of functions');\n    }\n\n    const unsubscribeFunctions = callbacks.map((callback) =>\n      ChangeNotifier.listen(eventName, callback, state)\n    );\n\n    return (): void => {\n      unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n    };\n  }\n\n  // Retrieve the latest state data for a specific event\n  static getLatestState<T>(eventName: string): T | undefined {\n    this.validateEventName(eventName);\n\n    return ChangeNotifier.notifierState[eventName];\n  }\n}\n\nexport default ChangeNotifier;\n","import { ERROR_MSG_MAP } from 'constants/common';\nimport { AudioEvents, MediaTrack } from 'types';\nimport ChangeNotifier from './notifier';\n\nconst isValidArray = (arr: any[]) => arr && Array.isArray(arr) && arr.length;\nconst isValidFunction = (fn: any) =>\n  fn instanceof Function && typeof fn === 'function';\n\nconst isValidObject = (obj: any) =>\n  typeof obj === 'object' &&\n  obj !== null &&\n  obj instanceof Object &&\n  Object.keys(obj).length;\n\nconst isValidWindow = typeof window !== undefined && window instanceof Window;\nconst loadedScripts: any = {};\n\nconst getReadableErrorMessage = (audioInstance: HTMLAudioElement) => {\n  let message = '';\n  const err = audioInstance.error;\n\n  switch (err?.code) {\n    case MediaError.MEDIA_ERR_ABORTED:\n      message += ERROR_MSG_MAP['MEDIA_ERR_ABORTED'];\n      break;\n    case MediaError.MEDIA_ERR_NETWORK:\n      message += ERROR_MSG_MAP['MEDIA_ERR_NETWORK'];\n      break;\n    case MediaError.MEDIA_ERR_DECODE:\n      message += ERROR_MSG_MAP['MEDIA_ERR_DECODE'];\n      break;\n    case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n      message += ERROR_MSG_MAP['MEDIA_ERR_SRC_NOT_SUPPORTED'];\n      break;\n    default:\n      message += ERROR_MSG_MAP['DEFAULT'];\n      break;\n  }\n\n  return message;\n};\n\nconst metaDataCreator = (mediaTrack: MediaTrack) => {\n  const { title, album, artist, artwork } = mediaTrack;\n  const artworkUrl = artwork ? artwork[0]?.src : '';\n  const sizes = [\n    '96x96',\n    '128x128',\n    '192x192',\n    '256x256',\n    '384x384',\n    '512x512'\n  ];\n  const artworkMap = sizes.map((el) => {\n    return { src: artworkUrl, sizes: el, type: 'image/png' };\n  });\n  const metaData = {\n    title,\n    album,\n    artist,\n    artwork: artworkMap\n  };\n  return metaData;\n};\n\nlet previousTrackPlayTime = 0;\nexport const calculateActualPlayedLength = (\n  audioInstance: HTMLAudioElement,\n  event?: keyof AudioEvents\n) => {\n  const lengthSet = new Set();\n  for (let i = 0; i < audioInstance.played.length; i++) {\n    const startX = audioInstance.played.start(i);\n    const endX = audioInstance.played.end(i);\n    const width = endX - startX;\n    lengthSet.add(width);\n  }\n  const lengthArr = [...lengthSet] as number[];\n  const currentTrackPlayTime = lengthArr.reduce((acc, val) => acc + val, 0);\n\n  previousTrackPlayTime = ['ENDED', 'TRACK_CHANGE', 'PAUSE'].includes(\n    event as keyof AudioEvents\n  )\n    ? currentTrackPlayTime\n    : previousTrackPlayTime;\n  ChangeNotifier.notify('AUDIO_STATE', {\n    currentTrackPlayTime,\n    previousTrackPlayTime\n  });\n};\n\nconst loadScript = (\n  url: string,\n  onLoad: () => void,\n  name: string\n): Promise<void> => {\n  return new Promise<void>((resolve, reject) => {\n    if (window instanceof Window && window.document) {\n      if (!loadedScripts[name]) {\n        loadedScripts[name] = true;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        script.async = true;\n        script.onload = () => {\n          onLoad();\n          resolve();\n        };\n        document.head.appendChild(script);\n      } else {\n        onLoad();\n        resolve();\n      }\n    } else {\n      reject(`Window not ready unable to initialize ${name}`);\n    }\n  });\n};\n\nexport {\n  getReadableErrorMessage,\n  isValidArray,\n  isValidFunction,\n  isValidObject,\n  isValidWindow,\n  loadScript,\n  metaDataCreator\n};\n","import { AudioX } from 'audio';\nimport { bands, presets } from 'constants/equalizer';\nimport { isValidArray } from 'helpers/common';\n\nimport { EqualizerStatus, Preset } from 'types/equalizer.types';\n\nclass Equalizer {\n  private static _instance: Equalizer;\n  private audioCtx: AudioContext;\n  private audioCtxStatus: EqualizerStatus;\n  private eqFilterBands: BiquadFilterNode[];\n\n  constructor() {\n    if (Equalizer._instance) {\n      console.warn(\n        'Instantiation failed: cannot create multiple instance of Equalizer returning existing instance'\n      );\n      return Equalizer._instance;\n    }\n\n    if (this.audioCtx === undefined && typeof AudioContext !== 'undefined') {\n      if (typeof AudioContext !== 'undefined') {\n        this.audioCtx = new AudioContext();\n        this.audioCtxStatus = 'ACTIVE';\n        this.init();\n      } else if (typeof (window as any).webkitAudioContext !== 'undefined') {\n        this.audioCtx = new (window as any).webkitAudioContext();\n        this.audioCtxStatus = 'ACTIVE';\n        this.init();\n      } else {\n        throw new Error('Web Audio API is not supported in this browser.');\n      }\n    } else {\n      console.log('Equalizer not initialized, AudioContext failed');\n      this.audioCtxStatus = 'FAILED';\n    }\n\n    // context state at this time is `undefined` in iOS8 Safari\n    if (\n      this.audioCtxStatus === 'ACTIVE' &&\n      this.audioCtx.state === 'suspended'\n    ) {\n      var resume = () => {\n        this.audioCtx.resume();\n        setTimeout(() => {\n          if (this.audioCtx.state === 'running') {\n            document.body.removeEventListener('click', resume, false);\n          }\n        }, 0);\n      };\n\n      document.body.addEventListener('click', resume, false);\n    }\n\n    Equalizer._instance = this;\n  }\n\n  init() {\n    try {\n      const audioInstance = AudioX.getAudioInstance();\n      const audioSource = this.audioCtx.createMediaElementSource(audioInstance);\n\n      const equalizerBands = bands.map((band) => {\n        const filter = this.audioCtx.createBiquadFilter();\n        filter.type = band.type;\n        filter.frequency.value = band.frequency;\n        filter.gain.value = band.gain;\n        filter.Q.value = 1;\n        return filter;\n      });\n\n      const gainNode = this.audioCtx.createGain();\n      gainNode.gain.value = 1; //Normalize sound output\n\n      audioSource.connect(equalizerBands[0]);\n\n      for (let i = 0; i < equalizerBands.length - 1; i++) {\n        equalizerBands[i].connect(equalizerBands[i + 1]);\n      }\n\n      equalizerBands[equalizerBands.length - 1].connect(gainNode);\n      gainNode.connect(this.audioCtx.destination);\n\n      this.audioCtxStatus = 'ACTIVE';\n      this.eqFilterBands = equalizerBands;\n    } catch (error) {\n      this.audioCtxStatus = 'FAILED';\n    }\n  }\n\n  setPreset(id: keyof Preset) {\n    const preset = presets.find((el) => el.id === id);\n    console.log({ preset });\n    if (\n      !this.eqFilterBands ||\n      this.eqFilterBands.length !== preset?.gains.length\n    ) {\n      console.error('Invalid data provided.');\n      return;\n    }\n    for (let i = 0; i < this.eqFilterBands.length; i++) {\n      this.eqFilterBands[i].gain.value = preset?.gains[i];\n    }\n  }\n\n  static getPresets() {\n    return presets;\n  }\n\n  status() {\n    if (this.audioCtx.state === 'suspended') {\n      this.audioCtx.resume();\n    }\n    return this.audioCtxStatus;\n  }\n\n  setCustomEQ(gains: number[]) {\n    if (isValidArray(gains)) {\n      this.eqFilterBands.forEach((band: BiquadFilterNode, index: number) => {\n        band.gain.value = gains[index];\n      });\n    }\n  }\n}\n\nexport { Equalizer };\n","import { PLAYBACK_STATE } from 'constants/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { HlsEventsCallbackMap } from 'types/audioEvents.types';\n\nexport const HLS_EVENTS_CALLBACK_MAP: HlsEventsCallbackMap = {\n  ERROR: (e: Event, data: any) => {\n    const type = data.type;\n    const detail = data.details;\n    const isFatal = data.fatal;\n    console.log('STATUS', e.type);\n\n    ChangeNotifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.ERROR,\n        error: {\n          type,\n          isFatal,\n          detail\n        }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  FRAG_CHANGED: () => {\n    console.log('FRAG_CHANGED');\n  }\n};\n","import { AudioEvents } from 'types';\n\nexport const AUDIO_EVENTS: AudioEvents = Object.freeze({\n  ABORT: 'abort',\n  TIME_UPDATE: 'timeupdate',\n  CAN_PLAY: 'canplay',\n  CAN_PLAY_THROUGH: 'canplaythrough',\n  DURATION_CHANGE: 'durationchange',\n  ENDED: 'ended',\n  EMPTIED: 'emptied',\n  PLAYING: 'playing',\n  WAITING: 'waiting',\n  SEEKING: 'seeking',\n  SEEKED: 'seeked',\n  LOADED_META_DATA: 'loadedmetadata',\n  LOADED_DATA: 'loadeddata',\n  PLAY: 'play',\n  PAUSE: 'pause',\n  RATE_CHANGE: 'ratechange',\n  VOLUME_CHANGE: 'volumechange',\n  SUSPEND: 'suspend',\n  STALLED: 'stalled',\n  PROGRESS: 'progress',\n  LOAD_START: 'loadstart',\n  ERROR: 'error',\n  TRACK_CHANGE: 'trackchange' // this is a custom event added to support track change\n});\n\nexport const HLS_EVENTS = {\n  MEDIA_ATTACHING: 'hlsMediaAttaching',\n  MEDIA_ATTACHED: 'hlsMediaAttached',\n  MEDIA_DETACHING: 'hlsMediaDetaching',\n  MEDIA_DETACHED: 'hlsMediaDetached',\n  BUFFER_RESET: 'hlsBufferReset',\n  BUFFER_CODECS: 'hlsBufferCodecs',\n  BUFFER_CREATED: 'hlsBufferCreated',\n  BUFFER_APPENDING: 'hlsBufferAppending',\n  BUFFER_APPENDED: 'hlsBufferAppended',\n  BUFFER_EOS: 'hlsBufferEos',\n  BUFFER_FLUSHING: 'hlsBufferFlushing',\n  BUFFER_FLUSHED: 'hlsBufferFlushed',\n  MANIFEST_LOADING: 'hlsManifestLoading',\n  MANIFEST_LOADED: 'hlsManifestLoaded',\n  MANIFEST_PARSED: 'hlsManifestParsed',\n  LEVEL_SWITCHING: 'hlsLevelSwitching',\n  LEVEL_SWITCHED: 'hlsLevelSwitched',\n  LEVEL_LOADING: 'hlsLevelLoading',\n  LEVEL_LOADED: 'hlsLevelLoaded',\n  LEVEL_UPDATED: 'hlsLevelUpdated',\n  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',\n  LEVELS_UPDATED: 'hlsLevelsUpdated',\n  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',\n  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',\n  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',\n  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',\n  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',\n  SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',\n  SUBTITLE_TRACKS_CLEARED: 'hlsSubtitleTracksCleared',\n  SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',\n  SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',\n  SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',\n  SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',\n  CUES_PARSED: 'hlsCuesParsed',\n  NON_NATIVE_TEXT_TRACKS_FOUND: 'hlsNonNativeTextTracksFound',\n  INIT_PTS_FOUND: 'hlsInitPtsFound',\n  FRAG_LOADING: 'hlsFragLoading',\n  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',\n  FRAG_LOADED: 'hlsFragLoaded',\n  FRAG_DECRYPTED: 'hlsFragDecrypted',\n  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',\n  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',\n  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',\n  FRAG_PARSED: 'hlsFragParsed',\n  FRAG_BUFFERED: 'hlsFragBuffered',\n  FRAG_CHANGED: 'hlsFragChanged',\n  FPS_DROP: 'hlsFpsDrop',\n  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',\n  ERROR: 'hlsError',\n  DESTROYING: 'hlsDestroying',\n  KEY_LOADING: 'hlsKeyLoading',\n  KEY_LOADED: 'hlsKeyLoaded',\n  LIVE_BACK_BUFFER_REACHED: 'hlsLiveBackBufferReached',\n  BACK_BUFFER_REACHED: 'hlsBackBufferReached'\n};\n\nexport const CUSTOM_AUDIO_EVENTS = Object.freeze({\n  AUDIO_X_STATE: 'AUDIO_X_STATE'\n});\n","import HlsAdapter from 'adapters/hls';\nimport { AudioX } from 'audio';\nimport { isValidArray } from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport {\n  AudioEvents,\n  EventListenerCallbackMap,\n  EventListenersList,\n  HlsEvents,\n  HlsEventsCallbackMap\n} from 'types/audioEvents.types';\nimport { HlsListeners } from '../types/hls.js.js';\nimport { AUDIO_EVENTS, HLS_EVENTS } from './audioEvents';\n\n/**\n * this attaches event listeners, for audio also sends a flag to calculate playLog\n * loops through the event listeners map and attaches it to the audio element\n */\nconst attachEventListeners = (\n  eventListenersCallbackMap: EventListenerCallbackMap,\n  playLogEnabled: boolean = false\n) => {\n  const audioInstance = AudioX.getAudioInstance();\n  isValidArray(Object.keys(eventListenersCallbackMap)) &&\n    Object.keys(eventListenersCallbackMap).forEach((evt) => {\n      let event = evt as keyof AudioEvents;\n      audioInstance?.addEventListener(AUDIO_EVENTS[event], (e: Event) => {\n        if (evt && eventListenersCallbackMap[event]) {\n          const listenerCallback = eventListenersCallbackMap[event];\n          if (typeof listenerCallback === 'function') {\n            listenerCallback(e, audioInstance, playLogEnabled);\n          }\n        }\n      });\n    });\n};\n\nconst attachCustomEventListeners = (\n  eventListenersList: EventListenersList,\n  enablePlayLog: boolean = false\n) => {\n  const audioInstance = AudioX.getAudioInstance();\n  if (isValidArray(eventListenersList)) {\n    eventListenersList.forEach((evt) => {\n      let event = evt as keyof AudioEvents;\n      if (Object.keys(AUDIO_EVENTS).includes(event)) {\n        audioInstance?.addEventListener(AUDIO_EVENTS[event], (e: Event) => {\n          ChangeNotifier.notify(AUDIO_EVENTS[event], {\n            e,\n            audioInstance,\n            enablePlayLog\n          });\n        });\n      }\n    });\n  }\n};\n\nconst attachHlsEventsListeners = (\n  hlsEventlistenerCallbackMap: HlsEventsCallbackMap,\n  playLogEnabled: boolean = false\n) => {\n  const hls = new HlsAdapter();\n  const hlsInstance = hls.getHlsInstance();\n  isValidArray(Object.keys(hlsEventlistenerCallbackMap)) &&\n    Object.keys(hlsEventlistenerCallbackMap).forEach((evt) => {\n      let event = evt as keyof HlsEvents;\n      hlsInstance.on(\n        HLS_EVENTS[event] as keyof HlsListeners,\n        (e: any, data: any) => {\n          if (event && hlsEventlistenerCallbackMap[event]) {\n            const listenerCallback = hlsEventlistenerCallbackMap[event];\n            if (typeof listenerCallback === 'function') {\n              listenerCallback(e, data, hlsInstance, playLogEnabled);\n            }\n          }\n        }\n      );\n    });\n};\n\nexport {\n  attachCustomEventListeners,\n  attachEventListeners,\n  attachHlsEventsListeners\n};\n","declare global {\n  interface Window {\n    Hls: any;\n  }\n}\n\nimport { AudioX } from 'audio';\nimport { URLS } from 'constants/common';\nimport { HLS_EVENTS_CALLBACK_MAP } from 'events/hlsEvents';\nimport { attachHlsEventsListeners } from 'events/listeners';\nimport { loadScript } from 'helpers/common';\nimport { MediaTrack } from 'types';\nimport type Hls from 'types/hls.js.js';\nimport type { HlsConfig } from 'types/hls.js.js';\n\nlet hlsInstance: Hls;\n\nclass HlsAdapter {\n  private static _instance: HlsAdapter;\n  private HlsClass: typeof Hls;\n\n  constructor() {\n    if (HlsAdapter._instance) {\n      console.warn(\n        'Instantiation failed: cannot create multiple instance of HLS returning existing instance'\n      );\n      return HlsAdapter._instance;\n    }\n    HlsAdapter._instance = this;\n  }\n\n  async load() {\n    await loadScript(\n      URLS.HLS,\n      () => {\n        console.log('HLS Loaded');\n      },\n      'hls'\n    )\n      .then(() => {\n        this.HlsClass = window.Hls;\n        window.Hls = undefined;\n      })\n      .catch((msg: string) => {\n        console.log(msg);\n      });\n\n    return this.HlsClass;\n  }\n\n  async init(config: HlsConfig | {} = {}, enablePlayLog: boolean) {\n    const Hls = await this.load();\n    if (Hls.isSupported()) {\n      hlsInstance = new Hls(config);\n      attachHlsEventsListeners(HLS_EVENTS_CALLBACK_MAP, enablePlayLog);\n    }\n  }\n\n  addHlsMedia(mediaTrack: MediaTrack) {\n    const Hls = this.HlsClass;\n    const audioInstance = AudioX.getAudioInstance();\n    hlsInstance.loadSource(mediaTrack.source);\n    hlsInstance.attachMedia(audioInstance);\n    hlsInstance.on(Hls.Events.MEDIA_ATTACHED, function () {\n      console.log('hls media attached');\n    });\n  }\n\n  getHlsInstance() {\n    return hlsInstance;\n  }\n}\n\nexport default HlsAdapter;\n","import { ErrorEvents } from 'types/errorEvents.types';\n\nexport const ERROR_EVENTS: ErrorEvents = Object.freeze({\n  1: 'MEDIA_ERR_ABORTED',\n  3: 'MEDIA_ERR_DECODE',\n  2: 'MEDIA_ERR_NETWORK',\n  4: 'MEDIA_ERR_SRC_NOT_SUPPORTED',\n});\n","import { PLAYBACK_STATE } from 'constants/common';\nimport {\n  calculateActualPlayedLength,\n  getReadableErrorMessage\n} from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { AudioState, EventListenerCallbackMap } from 'types';\nimport { ERROR_EVENTS } from './errorEvents';\n\nconst notifier = ChangeNotifier;\n\nconst BASE_EVENT_CALLBACK_MAP: EventListenerCallbackMap = {\n  LOAD_START: (e, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_state_${e.type}`\n    );\n  },\n\n  DURATION_CHANGE: (e, audioInstance: HTMLAudioElement) => {\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState:\n          audioState.playbackState === 'playing'\n            ? PLAYBACK_STATE.PLAYING // fix for live streams where duration change is fired even when audio is playing\n            : PLAYBACK_STATE.DURATION_CHANGE,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_state_${e.type}`\n    );\n  },\n\n  LOADED_META_DATA: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_state_${e.type}`\n    );\n  },\n\n  LOADED_DATA: (e, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        duration: audioInstance?.duration,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_state_${e.type}`\n    );\n  },\n\n  CAN_PLAY: (e: Event) => {\n    console.log('STATUS', e.type);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.READY,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  CAN_PLAY_THROUGH: (e: Event) => {\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n    console.log('STATUS', e.type);\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState:\n          audioState.playbackState === 'playing'\n            ? PLAYBACK_STATE.PLAYING // fix for live streams as canplaythrough event is can be behave weirdly as there is no known end to the media\n            : PLAYBACK_STATE.READY,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  PLAY: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.PLAYING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  PLAYING: (e, audioInstance) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.PLAYING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  PAUSE: (e: Event, audioInstance: HTMLAudioElement, playLogEnabled) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.PAUSED,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n    if (playLogEnabled) {\n      calculateActualPlayedLength(audioInstance, 'PAUSE');\n    }\n  },\n\n  ENDED: (e: Event, audioInstance: HTMLAudioElement, playLogEnabled) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.ENDED,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n    if (playLogEnabled) {\n      calculateActualPlayedLength(audioInstance, 'ENDED');\n    }\n  },\n\n  ERROR: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const errorCode = audioInstance.error?.code as keyof typeof ERROR_EVENTS;\n    const message = getReadableErrorMessage(audioInstance);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.ERROR,\n        error: {\n          code: errorCode,\n          message: ERROR_EVENTS[errorCode],\n          readable: message\n        }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  TIME_UPDATE: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    const audioState = notifier.getLatestState('AUDIO_X_STATE') as AudioState;\n\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: audioInstance.paused\n          ? audioState?.playbackState\n          : PLAYBACK_STATE.PLAYING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  WAITING: (e: Event, audioInstance: HTMLAudioElement) => {\n    console.log('STATUS', e.type);\n    notifier.notify(\n      'AUDIO_STATE',\n      {\n        playbackState: PLAYBACK_STATE.BUFFERING,\n        progress: audioInstance?.currentTime,\n        error: { code: null, message: '', readable: '' }\n      },\n      `audiox_baseEvents_state_${e.type}`\n    );\n  },\n\n  VOLUME_CHANGE: (e: Event) => {\n    console.log('STATUS', e.type);\n    notifier.notify('AUDIO_STATE', {}, `audiox_baseEvents_state`);\n  }\n};\n\nexport { BASE_EVENT_CALLBACK_MAP };\n","import { AudioX } from 'audio';\nimport { metaDataCreator } from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { AudioState } from 'types';\n\nexport const updateMetaData = (data: any) => {\n  if ('mediaSession' in navigator) {\n    navigator.mediaSession.metadata = new MediaMetadata(metaDataCreator(data));\n  }\n};\n\nexport const attachMediaSessionHandlers = () => {\n  if ('mediaSession' in navigator) {\n    navigator.mediaSession.setActionHandler('play', () => {\n      const audioInstance = AudioX.getAudioInstance();\n\n      audioInstance.play();\n    });\n    navigator.mediaSession.setActionHandler('pause', () => {\n      const audioInstance = AudioX.getAudioInstance();\n      audioInstance.pause();\n    });\n  }\n};\n\nexport const updatePositionState = () => {\n  ChangeNotifier.listen('AUDIO_X_STATE', (data: AudioState) => {\n    if (data?.duration && data?.playbackRate && data?.progress) {\n      navigator.mediaSession.setPositionState({\n        duration: data.duration,\n        playbackRate: data.playbackRate,\n        position: data.progress\n      });\n    }\n  });\n};\n","import { PLAYBACK_STATE } from 'constants/common';\nimport ChangeNotifier from 'helpers/notifier';\nimport { ReadyState } from 'types';\nimport { AudioState, MediaTrack } from 'types/audio.types';\n\nexport const READY_STATE: ReadyState = {\n  HAVE_NOTHING: 0,\n  HAVE_METADATA: 1,\n  HAVE_CURRENT_DATA: 2,\n  HAVE_FUTURE_DATA: 3,\n  HAVE_ENOUGH_DATA: 4\n};\n\nexport const AUDIO_STATE: AudioState = {\n  playbackState: PLAYBACK_STATE.IDLE,\n  duration: 0,\n  bufferedDuration: 0,\n  progress: 0,\n  volume: 50,\n  playbackRate: 1,\n  error: {\n    code: null,\n    message: '',\n    readable: ''\n  },\n  currentTrack: {} as MediaTrack,\n  currentTrackPlayTime: 0,\n  previousTrackPlayTime: 0\n};\n\n/* Listen to state changes and update global audio state that is being exposed to outer world\n  Do not subscribe to this event, this may cause unexpected behavior instead attach your own custom\n  event listener, if you wish to have granular control on audio state. See: attachCustomEventListener \n*/\nChangeNotifier.listen(\n  'AUDIO_STATE',\n  (data: AudioState) => {\n    ChangeNotifier.notify('AUDIO_X_STATE', { ...AUDIO_STATE, ...data });\n  },\n  AUDIO_STATE\n);\n","import { Equalizer } from 'adapters/equalizer';\nimport HlsAdapter from 'adapters/hls';\nimport { AUDIO_X_CONSTANTS, PLAYBACK_STATE } from 'constants/common';\nimport { BASE_EVENT_CALLBACK_MAP } from 'events/baseEvents';\nimport { attachEventListeners } from 'events/listeners';\nimport { calculateActualPlayedLength } from 'helpers/common';\nimport ChangeNotifier from 'helpers/notifier';\n\nimport {\n  attachMediaSessionHandlers,\n  updateMetaData\n} from 'mediasession/mediasessionHandler';\nimport { READY_STATE } from 'states/audioState';\nimport { AudioInit, MediaTrack, PlaybackRate } from 'types/audio.types';\nimport { EqualizerStatus, Preset } from 'types/equalizer.types';\n\nlet audioInstance: HTMLAudioElement;\nconst notifier = ChangeNotifier;\n\nclass AudioX {\n  private _audio: HTMLAudioElement;\n  private isPlayLogEnabled: Boolean;\n  private static _instance: AudioX;\n  private eqStatus: EqualizerStatus = 'IDEAL';\n  private isEqEnabled: boolean = false;\n  private eqInstance: Equalizer;\n\n  constructor() {\n    if (AudioX._instance) {\n      console.warn(\n        'Instantiation failed: cannot create multiple instance of AudioX returning existing instance'\n      );\n      return AudioX._instance;\n    }\n    if (\n      process.env.NODE_ENV !== AUDIO_X_CONSTANTS?.DEVELOPMENT &&\n      audioInstance\n    ) {\n      throw new Error('Cannot create multiple audio instance');\n    }\n\n    AudioX._instance = this;\n    this._audio = new Audio();\n    audioInstance = this._audio;\n  }\n\n  /**\n   *\n   * @param initProps  initial config to initialize AudioX\n   * @param initProps.mediaTrack mediaTrack Object containing metadata and source of the media\n   * @param initProps.mediaTrack.title title of the Audio\n   * @param initProps.mediaTrack.source URI of the Audio\n   * @param initProps.mediaTrack.artwork artwork of the Audio\n   * @param initProps.mediaTrack.duration  duration of the audio\n   * @param initProps.mediaTrack.genre genre of the audio\n   * @param initProps.mediaTrack.album album of the audio\n   * @param initProps.mediaTrack.comment comment for the audio\n   * @param initProps.mediaTrack.year release year of the audio\n   * @param initProps.mediaTrack.artist artist of the audio\n   * @param mode mode of operation for AudioX\n   * @param autoplay flag for autoplay\n   * @param preloadStrategy strategy for preloading audio\n   * @param playbackRate default playbackRate of the audio\n   * @param attachAudioEventListeners flag for registering audio events\n   * @param attachMediaSessionHandlers flag for registering mediaSession handlers\n   */\n\n  async init(initProps: AudioInit) {\n    const {\n      preloadStrategy = 'auto',\n      autoPlay = false,\n      useDefaultEventListeners = true,\n      customEventListeners = null,\n      showNotificationActions = false,\n      enablePlayLog = false,\n      enableHls = false,\n      enableEQ = false,\n      crossOrigin = 'anonymous',\n      hlsConfig = {}\n    } = initProps;\n\n    this._audio?.setAttribute('id', 'audio_x_instance');\n    this._audio.preload = preloadStrategy;\n    this._audio.autoplay = autoPlay;\n    this._audio.crossOrigin = crossOrigin;\n    this.isPlayLogEnabled = enablePlayLog;\n\n    if (customEventListeners !== null) {\n      if (useDefaultEventListeners) {\n        console.warn(\n          `useDefaultEventListeners is set to true at init, are you trying to use the default event listeners?\n            set customEventListeners to null to use default event listeners`\n        );\n      }\n      attachEventListeners(customEventListeners, false);\n    } else {\n      attachEventListeners(BASE_EVENT_CALLBACK_MAP, enablePlayLog);\n    }\n\n    if (showNotificationActions) {\n      attachMediaSessionHandlers();\n    }\n\n    if (enableEQ) {\n      this.isEqEnabled = enableEQ;\n    }\n\n    if (enableHls) {\n      const hls = new HlsAdapter();\n      hls.init(hlsConfig, enablePlayLog);\n    }\n  }\n\n  async addMedia(mediaTrack: MediaTrack) {\n    if (!mediaTrack) {\n      return;\n    }\n\n    const mediaType = mediaTrack.source.includes('.m3u8') ? 'HLS' : 'DEFAULT';\n\n    if (this.isPlayLogEnabled) {\n      calculateActualPlayedLength(audioInstance, 'TRACK_CHANGE');\n    }\n\n    if (mediaType === 'HLS') {\n      const hls = new HlsAdapter();\n      const hlsInstance = hls.getHlsInstance();\n      if (hlsInstance) {\n        hlsInstance.detachMedia();\n        hls.addHlsMedia(mediaTrack);\n      } else {\n        console.warn(\n          'The source provided seems to be a HLS stream but, hls playback is not enabled. Please have a look at init method of AudioX'\n        );\n        await this.reset();\n      }\n    } else {\n      audioInstance.src = mediaTrack.source;\n    }\n\n    notifier.notify('AUDIO_STATE', {\n      playbackState: PLAYBACK_STATE.TRACK_CHANGE,\n      currentTrackPlayTime: 0,\n      currentTrack: mediaTrack\n    });\n\n    updateMetaData(mediaTrack);\n    audioInstance.load();\n  }\n\n  attachEq() {\n    if (this.isEqEnabled && this.eqStatus === 'IDEAL') {\n      try {\n        const eq = new Equalizer();\n        this.eqStatus = eq.status();\n        this.eqInstance = eq;\n      } catch (e) {\n        console.log('failed to enable equalizer');\n      }\n    }\n  }\n\n  async play() {\n    const isSourceAvailable = audioInstance.src !== '';\n    if (\n      audioInstance?.paused &&\n      audioInstance.HAVE_ENOUGH_DATA === READY_STATE.HAVE_ENOUGH_DATA &&\n      isSourceAvailable\n    ) {\n      await audioInstance\n        .play()\n        .then(() => {\n          console.log('PLAYING');\n        })\n        .catch(() => {\n          console.warn('cancelling current audio playback, track changed');\n        });\n    }\n  }\n\n  /**\n   *\n   * @param mediaTrack MediaTrack to be added and played\n   *\n   * Note: Use this method when you want to add media and do playback or want continuous playback\n   * You can also call addMedia and Play Separately to achieve playback.\n   */\n\n  async addMediaAndPlay(mediaTrack: MediaTrack) {\n    try {\n      if (mediaTrack) {\n        this.addMedia(mediaTrack).then(() => {\n          if (audioInstance.HAVE_ENOUGH_DATA === READY_STATE.HAVE_ENOUGH_DATA) {\n            setTimeout(async () => {\n              this.attachEq();\n              await this.play();\n            }, 950);\n          }\n        });\n      }\n    } catch (error) {\n      console.log('PLAYBACK FAILED');\n    }\n  }\n\n  pause() {\n    if (audioInstance && !audioInstance?.paused) {\n      audioInstance?.pause();\n    }\n  }\n\n  stop() {\n    if (audioInstance && !audioInstance.paused) {\n      audioInstance?.pause();\n      audioInstance.currentTime = 0;\n    }\n  }\n\n  /**\n   * @method reset :  This stops the playback and resets all the state of the audio\n   */\n  async reset() {\n    if (audioInstance) {\n      this.stop();\n      audioInstance.src = '';\n      audioInstance.srcObject = null;\n    }\n  }\n\n  /**\n   * @param volume : numeric value between 1-100 to be used.\n   */\n  setVolume(volume: number) {\n    const actualVolume = volume / 100;\n    if (audioInstance) {\n      audioInstance.volume = actualVolume;\n      notifier.notify('AUDIO_STATE', {\n        volume: volume\n      });\n    }\n  }\n  /**\n   * @param playbackRate : a number denoting speed at which the playback should happen,\n   */\n  setPlaybackRate(playbackRate: PlaybackRate) {\n    if (audioInstance) {\n      audioInstance.playbackRate = playbackRate;\n      notifier.notify('AUDIO_STATE', {\n        playbackRate\n      });\n    }\n  }\n\n  mute() {\n    if (audioInstance && !audioInstance.muted) {\n      audioInstance.muted = true;\n    }\n  }\n\n  seek(time: number) {\n    if (audioInstance) {\n      audioInstance.currentTime = time;\n    }\n  }\n\n  async destroy() {\n    if (audioInstance) {\n      await this.reset();\n      audioInstance.removeAttribute('src');\n      audioInstance.load();\n    }\n  }\n\n  subscribe(eventName: string, callback: (data: any) => void, state: any = {}) {\n    const unsubscribe = notifier.listen(eventName, callback, state);\n    return unsubscribe;\n  }\n\n  addEventListener(\n    event: keyof HTMLMediaElementEventMap,\n    callback: (data: any) => void\n  ) {\n    audioInstance.addEventListener(event, callback);\n  }\n\n  getPresets() {\n    return Equalizer.getPresets();\n  }\n\n  setPreset(id: keyof Preset) {\n    this.eqInstance.setPreset(id);\n  }\n\n  setCustomEQ(gains: number[]) {\n    this.eqInstance.setCustomEQ(gains);\n  }\n\n  get id() {\n    return audioInstance?.getAttribute('id');\n  }\n\n  static getAudioInstance() {\n    return audioInstance;\n  }\n}\n\nexport { AudioX };\n"]}